
handler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cdc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08000e70  08000e70  00010e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ee0  08000ee0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08000ee0  08000ee0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ee0  08000ee0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ee0  08000ee0  00010ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ee4  08000ee4  00010ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08000ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000068  08000f50  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08000f50  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004676  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d6c  00000000  00000000  0002470e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003b8  00000000  00000000  00025480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000340  00000000  00000000  00025838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001575f  00000000  00000000  00025b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000033df  00000000  00000000  0003b2d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000827d4  00000000  00000000  0003e6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0e8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012d4  00000000  00000000  000c0f08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000e58 	.word	0x08000e58

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08000e58 	.word	0x08000e58

080001d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001e4:	f003 0301 	and.w	r3, r3, #1
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d013      	beq.n	8000214 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d00b      	beq.n	8000214 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	e000      	b.n	8000200 <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000200:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d0f9      	beq.n	80001fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800020a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	b2d2      	uxtb	r2, r2
 8000212:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000214:	687b      	ldr	r3, [r7, #4]
}
 8000216:	4618      	mov	r0, r3
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr

08000222 <_write>:
#include"main.h"
#include<stdio.h>
int _write(int file, char *ptr, int len)
{
 8000222:	b580      	push	{r7, lr}
 8000224:	b086      	sub	sp, #24
 8000226:	af00      	add	r7, sp, #0
 8000228:	60f8      	str	r0, [r7, #12]
 800022a:	60b9      	str	r1, [r7, #8]
 800022c:	607a      	str	r2, [r7, #4]
    int DataIdx;



    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
 8000232:	e009      	b.n	8000248 <_write+0x26>
    {

        ITM_SendChar(*ptr++);
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	1c5a      	adds	r2, r3, #1
 8000238:	60ba      	str	r2, [r7, #8]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ffc9 	bl	80001d4 <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	3301      	adds	r3, #1
 8000246:	617b      	str	r3, [r7, #20]
 8000248:	697a      	ldr	r2, [r7, #20]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	429a      	cmp	r2, r3
 800024e:	dbf1      	blt.n	8000234 <_write+0x12>
    }
    return len;
 8000250:	687b      	ldr	r3, [r7, #4]
}
 8000252:	4618      	mov	r0, r3
 8000254:	3718      	adds	r7, #24
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	printf("am handler\n");
 8000260:	4805      	ldr	r0, [pc, #20]	; (8000278 <EXTI1_IRQHandler+0x1c>)
 8000262:	f000 f9ed 	bl	8000640 <puts>
	EXTI->PR |=EXTI_PR_PR1;
 8000266:	4b05      	ldr	r3, [pc, #20]	; (800027c <EXTI1_IRQHandler+0x20>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a04      	ldr	r2, [pc, #16]	; (800027c <EXTI1_IRQHandler+0x20>)
 800026c:	f043 0302 	orr.w	r3, r3, #2
 8000270:	6153      	str	r3, [r2, #20]
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	08000e70 	.word	0x08000e70
 800027c:	40013c00 	.word	0x40013c00

08000280 <main>:
int main (void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=RCC_AHB1ENR_GPIOAEN;
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <main+0x30>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a09      	ldr	r2, [pc, #36]	; (80002b0 <main+0x30>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30
	EXTI->IMR    |=EXTI_IMR_MR1;
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <main+0x34>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <main+0x34>)
 8000296:	f043 0302 	orr.w	r3, r3, #2
 800029a:	6013      	str	r3, [r2, #0]
	EXTI->RTSR   |=EXTI_RTSR_TR1;
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <main+0x34>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <main+0x34>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6093      	str	r3, [r2, #8]
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80002a8:	2007      	movs	r0, #7
 80002aa:	f000 f92d 	bl	8000508 <HAL_NVIC_EnableIRQ>
	while(1);
 80002ae:	e7fe      	b.n	80002ae <main+0x2e>
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40013c00 	.word	0x40013c00

080002b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr

080002c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002c6:	b480      	push	{r7}
 80002c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ca:	e7fe      	b.n	80002ca <HardFault_Handler+0x4>

080002cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <MemManage_Handler+0x4>

080002d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002d6:	e7fe      	b.n	80002d6 <BusFault_Handler+0x4>

080002d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <UsageFault_Handler+0x4>

080002de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr

080002fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800030c:	f000 f8ca 	bl	80004a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}

08000314 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000320:	2300      	movs	r3, #0
 8000322:	617b      	str	r3, [r7, #20]
 8000324:	e00a      	b.n	800033c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000326:	f3af 8000 	nop.w
 800032a:	4601      	mov	r1, r0
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	1c5a      	adds	r2, r3, #1
 8000330:	60ba      	str	r2, [r7, #8]
 8000332:	b2ca      	uxtb	r2, r1
 8000334:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	3301      	adds	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	697a      	ldr	r2, [r7, #20]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	429a      	cmp	r2, r3
 8000342:	dbf0      	blt.n	8000326 <_read+0x12>
	}

return len;
 8000344:	687b      	ldr	r3, [r7, #4]
}
 8000346:	4618      	mov	r0, r3
 8000348:	3718      	adds	r7, #24
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <_close>:
	}
	return len;
}

int _close(int file)
{
 800034e:	b480      	push	{r7}
 8000350:	b083      	sub	sp, #12
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
	return -1;
 8000356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800035a:	4618      	mov	r0, r3
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
 800036e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000376:	605a      	str	r2, [r3, #4]
	return 0;
 8000378:	2300      	movs	r3, #0
}
 800037a:	4618      	mov	r0, r3
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <_isatty>:

int _isatty(int file)
{
 8000386:	b480      	push	{r7}
 8000388:	b083      	sub	sp, #12
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
	return 1;
 800038e:	2301      	movs	r3, #1
}
 8000390:	4618      	mov	r0, r3
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
	return 0;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
	...

080003b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003c0:	4a14      	ldr	r2, [pc, #80]	; (8000414 <_sbrk+0x5c>)
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <_sbrk+0x60>)
 80003c4:	1ad3      	subs	r3, r2, r3
 80003c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003cc:	4b13      	ldr	r3, [pc, #76]	; (800041c <_sbrk+0x64>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d102      	bne.n	80003da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <_sbrk+0x64>)
 80003d6:	4a12      	ldr	r2, [pc, #72]	; (8000420 <_sbrk+0x68>)
 80003d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <_sbrk+0x64>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4413      	add	r3, r2
 80003e2:	693a      	ldr	r2, [r7, #16]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d207      	bcs.n	80003f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003e8:	f000 f89c 	bl	8000524 <__errno>
 80003ec:	4602      	mov	r2, r0
 80003ee:	230c      	movs	r3, #12
 80003f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80003f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003f6:	e009      	b.n	800040c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <_sbrk+0x64>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003fe:	4b07      	ldr	r3, [pc, #28]	; (800041c <_sbrk+0x64>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4413      	add	r3, r2
 8000406:	4a05      	ldr	r2, [pc, #20]	; (800041c <_sbrk+0x64>)
 8000408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800040a:	68fb      	ldr	r3, [r7, #12]
}
 800040c:	4618      	mov	r0, r3
 800040e:	3718      	adds	r7, #24
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20018000 	.word	0x20018000
 8000418:	00000400 	.word	0x00000400
 800041c:	20000084 	.word	0x20000084
 8000420:	20000098 	.word	0x20000098

08000424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <SystemInit+0x28>)
 800042a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800042e:	4a07      	ldr	r2, [pc, #28]	; (800044c <SystemInit+0x28>)
 8000430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <SystemInit+0x28>)
 800043a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800043e:	609a      	str	r2, [r3, #8]
#endif
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	e000ed00 	.word	0xe000ed00

08000450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000488 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000454:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000456:	e003      	b.n	8000460 <LoopCopyDataInit>

08000458 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800045a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800045c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800045e:	3104      	adds	r1, #4

08000460 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000460:	480b      	ldr	r0, [pc, #44]	; (8000490 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000464:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000466:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000468:	d3f6      	bcc.n	8000458 <CopyDataInit>
  ldr  r2, =_sbss
 800046a:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800046c:	e002      	b.n	8000474 <LoopFillZerobss>

0800046e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800046e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000470:	f842 3b04 	str.w	r3, [r2], #4

08000474 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000476:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000478:	d3f9      	bcc.n	800046e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800047a:	f7ff ffd3 	bl	8000424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800047e:	f000 f857 	bl	8000530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000482:	f7ff fefd 	bl	8000280 <main>
  bx  lr    
 8000486:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000488:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800048c:	08000ee8 	.word	0x08000ee8
  ldr  r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000494:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8000498:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 800049c:	20000098 	.word	0x20000098

080004a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004a0:	e7fe      	b.n	80004a0 <ADC_IRQHandler>
	...

080004a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <HAL_IncTick+0x20>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <HAL_IncTick+0x24>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4413      	add	r3, r2
 80004b4:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <HAL_IncTick+0x24>)
 80004b6:	6013      	str	r3, [r2, #0]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	20000000 	.word	0x20000000
 80004c8:	20000090 	.word	0x20000090

080004cc <__NVIC_EnableIRQ>:
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	db0b      	blt.n	80004f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	f003 021f 	and.w	r2, r3, #31
 80004e4:	4907      	ldr	r1, [pc, #28]	; (8000504 <__NVIC_EnableIRQ+0x38>)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	095b      	lsrs	r3, r3, #5
 80004ec:	2001      	movs	r0, #1
 80004ee:	fa00 f202 	lsl.w	r2, r0, r2
 80004f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	e000e100 	.word	0xe000e100

08000508 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ffd8 	bl	80004cc <__NVIC_EnableIRQ>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <__errno>:
 8000524:	4b01      	ldr	r3, [pc, #4]	; (800052c <__errno+0x8>)
 8000526:	6818      	ldr	r0, [r3, #0]
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000004 	.word	0x20000004

08000530 <__libc_init_array>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	4e0d      	ldr	r6, [pc, #52]	; (8000568 <__libc_init_array+0x38>)
 8000534:	4c0d      	ldr	r4, [pc, #52]	; (800056c <__libc_init_array+0x3c>)
 8000536:	1ba4      	subs	r4, r4, r6
 8000538:	10a4      	asrs	r4, r4, #2
 800053a:	2500      	movs	r5, #0
 800053c:	42a5      	cmp	r5, r4
 800053e:	d109      	bne.n	8000554 <__libc_init_array+0x24>
 8000540:	4e0b      	ldr	r6, [pc, #44]	; (8000570 <__libc_init_array+0x40>)
 8000542:	4c0c      	ldr	r4, [pc, #48]	; (8000574 <__libc_init_array+0x44>)
 8000544:	f000 fc88 	bl	8000e58 <_init>
 8000548:	1ba4      	subs	r4, r4, r6
 800054a:	10a4      	asrs	r4, r4, #2
 800054c:	2500      	movs	r5, #0
 800054e:	42a5      	cmp	r5, r4
 8000550:	d105      	bne.n	800055e <__libc_init_array+0x2e>
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000558:	4798      	blx	r3
 800055a:	3501      	adds	r5, #1
 800055c:	e7ee      	b.n	800053c <__libc_init_array+0xc>
 800055e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000562:	4798      	blx	r3
 8000564:	3501      	adds	r5, #1
 8000566:	e7f2      	b.n	800054e <__libc_init_array+0x1e>
 8000568:	08000ee0 	.word	0x08000ee0
 800056c:	08000ee0 	.word	0x08000ee0
 8000570:	08000ee0 	.word	0x08000ee0
 8000574:	08000ee4 	.word	0x08000ee4

08000578 <memset>:
 8000578:	4402      	add	r2, r0
 800057a:	4603      	mov	r3, r0
 800057c:	4293      	cmp	r3, r2
 800057e:	d100      	bne.n	8000582 <memset+0xa>
 8000580:	4770      	bx	lr
 8000582:	f803 1b01 	strb.w	r1, [r3], #1
 8000586:	e7f9      	b.n	800057c <memset+0x4>

08000588 <_puts_r>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	460e      	mov	r6, r1
 800058c:	4605      	mov	r5, r0
 800058e:	b118      	cbz	r0, 8000598 <_puts_r+0x10>
 8000590:	6983      	ldr	r3, [r0, #24]
 8000592:	b90b      	cbnz	r3, 8000598 <_puts_r+0x10>
 8000594:	f000 fa0c 	bl	80009b0 <__sinit>
 8000598:	69ab      	ldr	r3, [r5, #24]
 800059a:	68ac      	ldr	r4, [r5, #8]
 800059c:	b913      	cbnz	r3, 80005a4 <_puts_r+0x1c>
 800059e:	4628      	mov	r0, r5
 80005a0:	f000 fa06 	bl	80009b0 <__sinit>
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <_puts_r+0xac>)
 80005a6:	429c      	cmp	r4, r3
 80005a8:	d117      	bne.n	80005da <_puts_r+0x52>
 80005aa:	686c      	ldr	r4, [r5, #4]
 80005ac:	89a3      	ldrh	r3, [r4, #12]
 80005ae:	071b      	lsls	r3, r3, #28
 80005b0:	d51d      	bpl.n	80005ee <_puts_r+0x66>
 80005b2:	6923      	ldr	r3, [r4, #16]
 80005b4:	b1db      	cbz	r3, 80005ee <_puts_r+0x66>
 80005b6:	3e01      	subs	r6, #1
 80005b8:	68a3      	ldr	r3, [r4, #8]
 80005ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80005be:	3b01      	subs	r3, #1
 80005c0:	60a3      	str	r3, [r4, #8]
 80005c2:	b9e9      	cbnz	r1, 8000600 <_puts_r+0x78>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	da2e      	bge.n	8000626 <_puts_r+0x9e>
 80005c8:	4622      	mov	r2, r4
 80005ca:	210a      	movs	r1, #10
 80005cc:	4628      	mov	r0, r5
 80005ce:	f000 f83f 	bl	8000650 <__swbuf_r>
 80005d2:	3001      	adds	r0, #1
 80005d4:	d011      	beq.n	80005fa <_puts_r+0x72>
 80005d6:	200a      	movs	r0, #10
 80005d8:	e011      	b.n	80005fe <_puts_r+0x76>
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <_puts_r+0xb0>)
 80005dc:	429c      	cmp	r4, r3
 80005de:	d101      	bne.n	80005e4 <_puts_r+0x5c>
 80005e0:	68ac      	ldr	r4, [r5, #8]
 80005e2:	e7e3      	b.n	80005ac <_puts_r+0x24>
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <_puts_r+0xb4>)
 80005e6:	429c      	cmp	r4, r3
 80005e8:	bf08      	it	eq
 80005ea:	68ec      	ldreq	r4, [r5, #12]
 80005ec:	e7de      	b.n	80005ac <_puts_r+0x24>
 80005ee:	4621      	mov	r1, r4
 80005f0:	4628      	mov	r0, r5
 80005f2:	f000 f87f 	bl	80006f4 <__swsetup_r>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d0dd      	beq.n	80005b6 <_puts_r+0x2e>
 80005fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	2b00      	cmp	r3, #0
 8000602:	da04      	bge.n	800060e <_puts_r+0x86>
 8000604:	69a2      	ldr	r2, [r4, #24]
 8000606:	429a      	cmp	r2, r3
 8000608:	dc06      	bgt.n	8000618 <_puts_r+0x90>
 800060a:	290a      	cmp	r1, #10
 800060c:	d004      	beq.n	8000618 <_puts_r+0x90>
 800060e:	6823      	ldr	r3, [r4, #0]
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	6022      	str	r2, [r4, #0]
 8000614:	7019      	strb	r1, [r3, #0]
 8000616:	e7cf      	b.n	80005b8 <_puts_r+0x30>
 8000618:	4622      	mov	r2, r4
 800061a:	4628      	mov	r0, r5
 800061c:	f000 f818 	bl	8000650 <__swbuf_r>
 8000620:	3001      	adds	r0, #1
 8000622:	d1c9      	bne.n	80005b8 <_puts_r+0x30>
 8000624:	e7e9      	b.n	80005fa <_puts_r+0x72>
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	200a      	movs	r0, #10
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	6022      	str	r2, [r4, #0]
 800062e:	7018      	strb	r0, [r3, #0]
 8000630:	e7e5      	b.n	80005fe <_puts_r+0x76>
 8000632:	bf00      	nop
 8000634:	08000ea0 	.word	0x08000ea0
 8000638:	08000ec0 	.word	0x08000ec0
 800063c:	08000e80 	.word	0x08000e80

08000640 <puts>:
 8000640:	4b02      	ldr	r3, [pc, #8]	; (800064c <puts+0xc>)
 8000642:	4601      	mov	r1, r0
 8000644:	6818      	ldr	r0, [r3, #0]
 8000646:	f7ff bf9f 	b.w	8000588 <_puts_r>
 800064a:	bf00      	nop
 800064c:	20000004 	.word	0x20000004

08000650 <__swbuf_r>:
 8000650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000652:	460e      	mov	r6, r1
 8000654:	4614      	mov	r4, r2
 8000656:	4605      	mov	r5, r0
 8000658:	b118      	cbz	r0, 8000662 <__swbuf_r+0x12>
 800065a:	6983      	ldr	r3, [r0, #24]
 800065c:	b90b      	cbnz	r3, 8000662 <__swbuf_r+0x12>
 800065e:	f000 f9a7 	bl	80009b0 <__sinit>
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <__swbuf_r+0x98>)
 8000664:	429c      	cmp	r4, r3
 8000666:	d12a      	bne.n	80006be <__swbuf_r+0x6e>
 8000668:	686c      	ldr	r4, [r5, #4]
 800066a:	69a3      	ldr	r3, [r4, #24]
 800066c:	60a3      	str	r3, [r4, #8]
 800066e:	89a3      	ldrh	r3, [r4, #12]
 8000670:	071a      	lsls	r2, r3, #28
 8000672:	d52e      	bpl.n	80006d2 <__swbuf_r+0x82>
 8000674:	6923      	ldr	r3, [r4, #16]
 8000676:	b363      	cbz	r3, 80006d2 <__swbuf_r+0x82>
 8000678:	6923      	ldr	r3, [r4, #16]
 800067a:	6820      	ldr	r0, [r4, #0]
 800067c:	1ac0      	subs	r0, r0, r3
 800067e:	6963      	ldr	r3, [r4, #20]
 8000680:	b2f6      	uxtb	r6, r6
 8000682:	4283      	cmp	r3, r0
 8000684:	4637      	mov	r7, r6
 8000686:	dc04      	bgt.n	8000692 <__swbuf_r+0x42>
 8000688:	4621      	mov	r1, r4
 800068a:	4628      	mov	r0, r5
 800068c:	f000 f926 	bl	80008dc <_fflush_r>
 8000690:	bb28      	cbnz	r0, 80006de <__swbuf_r+0x8e>
 8000692:	68a3      	ldr	r3, [r4, #8]
 8000694:	3b01      	subs	r3, #1
 8000696:	60a3      	str	r3, [r4, #8]
 8000698:	6823      	ldr	r3, [r4, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	6022      	str	r2, [r4, #0]
 800069e:	701e      	strb	r6, [r3, #0]
 80006a0:	6963      	ldr	r3, [r4, #20]
 80006a2:	3001      	adds	r0, #1
 80006a4:	4283      	cmp	r3, r0
 80006a6:	d004      	beq.n	80006b2 <__swbuf_r+0x62>
 80006a8:	89a3      	ldrh	r3, [r4, #12]
 80006aa:	07db      	lsls	r3, r3, #31
 80006ac:	d519      	bpl.n	80006e2 <__swbuf_r+0x92>
 80006ae:	2e0a      	cmp	r6, #10
 80006b0:	d117      	bne.n	80006e2 <__swbuf_r+0x92>
 80006b2:	4621      	mov	r1, r4
 80006b4:	4628      	mov	r0, r5
 80006b6:	f000 f911 	bl	80008dc <_fflush_r>
 80006ba:	b190      	cbz	r0, 80006e2 <__swbuf_r+0x92>
 80006bc:	e00f      	b.n	80006de <__swbuf_r+0x8e>
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <__swbuf_r+0x9c>)
 80006c0:	429c      	cmp	r4, r3
 80006c2:	d101      	bne.n	80006c8 <__swbuf_r+0x78>
 80006c4:	68ac      	ldr	r4, [r5, #8]
 80006c6:	e7d0      	b.n	800066a <__swbuf_r+0x1a>
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <__swbuf_r+0xa0>)
 80006ca:	429c      	cmp	r4, r3
 80006cc:	bf08      	it	eq
 80006ce:	68ec      	ldreq	r4, [r5, #12]
 80006d0:	e7cb      	b.n	800066a <__swbuf_r+0x1a>
 80006d2:	4621      	mov	r1, r4
 80006d4:	4628      	mov	r0, r5
 80006d6:	f000 f80d 	bl	80006f4 <__swsetup_r>
 80006da:	2800      	cmp	r0, #0
 80006dc:	d0cc      	beq.n	8000678 <__swbuf_r+0x28>
 80006de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80006e2:	4638      	mov	r0, r7
 80006e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006e6:	bf00      	nop
 80006e8:	08000ea0 	.word	0x08000ea0
 80006ec:	08000ec0 	.word	0x08000ec0
 80006f0:	08000e80 	.word	0x08000e80

080006f4 <__swsetup_r>:
 80006f4:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <__swsetup_r+0xcc>)
 80006f6:	b570      	push	{r4, r5, r6, lr}
 80006f8:	681d      	ldr	r5, [r3, #0]
 80006fa:	4606      	mov	r6, r0
 80006fc:	460c      	mov	r4, r1
 80006fe:	b125      	cbz	r5, 800070a <__swsetup_r+0x16>
 8000700:	69ab      	ldr	r3, [r5, #24]
 8000702:	b913      	cbnz	r3, 800070a <__swsetup_r+0x16>
 8000704:	4628      	mov	r0, r5
 8000706:	f000 f953 	bl	80009b0 <__sinit>
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <__swsetup_r+0xd0>)
 800070c:	429c      	cmp	r4, r3
 800070e:	d10f      	bne.n	8000730 <__swsetup_r+0x3c>
 8000710:	686c      	ldr	r4, [r5, #4]
 8000712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000716:	b29a      	uxth	r2, r3
 8000718:	0715      	lsls	r5, r2, #28
 800071a:	d42c      	bmi.n	8000776 <__swsetup_r+0x82>
 800071c:	06d0      	lsls	r0, r2, #27
 800071e:	d411      	bmi.n	8000744 <__swsetup_r+0x50>
 8000720:	2209      	movs	r2, #9
 8000722:	6032      	str	r2, [r6, #0]
 8000724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000728:	81a3      	strh	r3, [r4, #12]
 800072a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800072e:	e03e      	b.n	80007ae <__swsetup_r+0xba>
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <__swsetup_r+0xd4>)
 8000732:	429c      	cmp	r4, r3
 8000734:	d101      	bne.n	800073a <__swsetup_r+0x46>
 8000736:	68ac      	ldr	r4, [r5, #8]
 8000738:	e7eb      	b.n	8000712 <__swsetup_r+0x1e>
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <__swsetup_r+0xd8>)
 800073c:	429c      	cmp	r4, r3
 800073e:	bf08      	it	eq
 8000740:	68ec      	ldreq	r4, [r5, #12]
 8000742:	e7e6      	b.n	8000712 <__swsetup_r+0x1e>
 8000744:	0751      	lsls	r1, r2, #29
 8000746:	d512      	bpl.n	800076e <__swsetup_r+0x7a>
 8000748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800074a:	b141      	cbz	r1, 800075e <__swsetup_r+0x6a>
 800074c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000750:	4299      	cmp	r1, r3
 8000752:	d002      	beq.n	800075a <__swsetup_r+0x66>
 8000754:	4630      	mov	r0, r6
 8000756:	f000 fa19 	bl	8000b8c <_free_r>
 800075a:	2300      	movs	r3, #0
 800075c:	6363      	str	r3, [r4, #52]	; 0x34
 800075e:	89a3      	ldrh	r3, [r4, #12]
 8000760:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000764:	81a3      	strh	r3, [r4, #12]
 8000766:	2300      	movs	r3, #0
 8000768:	6063      	str	r3, [r4, #4]
 800076a:	6923      	ldr	r3, [r4, #16]
 800076c:	6023      	str	r3, [r4, #0]
 800076e:	89a3      	ldrh	r3, [r4, #12]
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	81a3      	strh	r3, [r4, #12]
 8000776:	6923      	ldr	r3, [r4, #16]
 8000778:	b94b      	cbnz	r3, 800078e <__swsetup_r+0x9a>
 800077a:	89a3      	ldrh	r3, [r4, #12]
 800077c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000784:	d003      	beq.n	800078e <__swsetup_r+0x9a>
 8000786:	4621      	mov	r1, r4
 8000788:	4630      	mov	r0, r6
 800078a:	f000 f9bf 	bl	8000b0c <__smakebuf_r>
 800078e:	89a2      	ldrh	r2, [r4, #12]
 8000790:	f012 0301 	ands.w	r3, r2, #1
 8000794:	d00c      	beq.n	80007b0 <__swsetup_r+0xbc>
 8000796:	2300      	movs	r3, #0
 8000798:	60a3      	str	r3, [r4, #8]
 800079a:	6963      	ldr	r3, [r4, #20]
 800079c:	425b      	negs	r3, r3
 800079e:	61a3      	str	r3, [r4, #24]
 80007a0:	6923      	ldr	r3, [r4, #16]
 80007a2:	b953      	cbnz	r3, 80007ba <__swsetup_r+0xc6>
 80007a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80007a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80007ac:	d1ba      	bne.n	8000724 <__swsetup_r+0x30>
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	0792      	lsls	r2, r2, #30
 80007b2:	bf58      	it	pl
 80007b4:	6963      	ldrpl	r3, [r4, #20]
 80007b6:	60a3      	str	r3, [r4, #8]
 80007b8:	e7f2      	b.n	80007a0 <__swsetup_r+0xac>
 80007ba:	2000      	movs	r0, #0
 80007bc:	e7f7      	b.n	80007ae <__swsetup_r+0xba>
 80007be:	bf00      	nop
 80007c0:	20000004 	.word	0x20000004
 80007c4:	08000ea0 	.word	0x08000ea0
 80007c8:	08000ec0 	.word	0x08000ec0
 80007cc:	08000e80 	.word	0x08000e80

080007d0 <__sflush_r>:
 80007d0:	898a      	ldrh	r2, [r1, #12]
 80007d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007d6:	4605      	mov	r5, r0
 80007d8:	0710      	lsls	r0, r2, #28
 80007da:	460c      	mov	r4, r1
 80007dc:	d458      	bmi.n	8000890 <__sflush_r+0xc0>
 80007de:	684b      	ldr	r3, [r1, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dc05      	bgt.n	80007f0 <__sflush_r+0x20>
 80007e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	dc02      	bgt.n	80007f0 <__sflush_r+0x20>
 80007ea:	2000      	movs	r0, #0
 80007ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d0f9      	beq.n	80007ea <__sflush_r+0x1a>
 80007f6:	2300      	movs	r3, #0
 80007f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80007fc:	682f      	ldr	r7, [r5, #0]
 80007fe:	6a21      	ldr	r1, [r4, #32]
 8000800:	602b      	str	r3, [r5, #0]
 8000802:	d032      	beq.n	800086a <__sflush_r+0x9a>
 8000804:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000806:	89a3      	ldrh	r3, [r4, #12]
 8000808:	075a      	lsls	r2, r3, #29
 800080a:	d505      	bpl.n	8000818 <__sflush_r+0x48>
 800080c:	6863      	ldr	r3, [r4, #4]
 800080e:	1ac0      	subs	r0, r0, r3
 8000810:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000812:	b10b      	cbz	r3, 8000818 <__sflush_r+0x48>
 8000814:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000816:	1ac0      	subs	r0, r0, r3
 8000818:	2300      	movs	r3, #0
 800081a:	4602      	mov	r2, r0
 800081c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800081e:	6a21      	ldr	r1, [r4, #32]
 8000820:	4628      	mov	r0, r5
 8000822:	47b0      	blx	r6
 8000824:	1c43      	adds	r3, r0, #1
 8000826:	89a3      	ldrh	r3, [r4, #12]
 8000828:	d106      	bne.n	8000838 <__sflush_r+0x68>
 800082a:	6829      	ldr	r1, [r5, #0]
 800082c:	291d      	cmp	r1, #29
 800082e:	d848      	bhi.n	80008c2 <__sflush_r+0xf2>
 8000830:	4a29      	ldr	r2, [pc, #164]	; (80008d8 <__sflush_r+0x108>)
 8000832:	40ca      	lsrs	r2, r1
 8000834:	07d6      	lsls	r6, r2, #31
 8000836:	d544      	bpl.n	80008c2 <__sflush_r+0xf2>
 8000838:	2200      	movs	r2, #0
 800083a:	6062      	str	r2, [r4, #4]
 800083c:	04d9      	lsls	r1, r3, #19
 800083e:	6922      	ldr	r2, [r4, #16]
 8000840:	6022      	str	r2, [r4, #0]
 8000842:	d504      	bpl.n	800084e <__sflush_r+0x7e>
 8000844:	1c42      	adds	r2, r0, #1
 8000846:	d101      	bne.n	800084c <__sflush_r+0x7c>
 8000848:	682b      	ldr	r3, [r5, #0]
 800084a:	b903      	cbnz	r3, 800084e <__sflush_r+0x7e>
 800084c:	6560      	str	r0, [r4, #84]	; 0x54
 800084e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000850:	602f      	str	r7, [r5, #0]
 8000852:	2900      	cmp	r1, #0
 8000854:	d0c9      	beq.n	80007ea <__sflush_r+0x1a>
 8000856:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800085a:	4299      	cmp	r1, r3
 800085c:	d002      	beq.n	8000864 <__sflush_r+0x94>
 800085e:	4628      	mov	r0, r5
 8000860:	f000 f994 	bl	8000b8c <_free_r>
 8000864:	2000      	movs	r0, #0
 8000866:	6360      	str	r0, [r4, #52]	; 0x34
 8000868:	e7c0      	b.n	80007ec <__sflush_r+0x1c>
 800086a:	2301      	movs	r3, #1
 800086c:	4628      	mov	r0, r5
 800086e:	47b0      	blx	r6
 8000870:	1c41      	adds	r1, r0, #1
 8000872:	d1c8      	bne.n	8000806 <__sflush_r+0x36>
 8000874:	682b      	ldr	r3, [r5, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0c5      	beq.n	8000806 <__sflush_r+0x36>
 800087a:	2b1d      	cmp	r3, #29
 800087c:	d001      	beq.n	8000882 <__sflush_r+0xb2>
 800087e:	2b16      	cmp	r3, #22
 8000880:	d101      	bne.n	8000886 <__sflush_r+0xb6>
 8000882:	602f      	str	r7, [r5, #0]
 8000884:	e7b1      	b.n	80007ea <__sflush_r+0x1a>
 8000886:	89a3      	ldrh	r3, [r4, #12]
 8000888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088c:	81a3      	strh	r3, [r4, #12]
 800088e:	e7ad      	b.n	80007ec <__sflush_r+0x1c>
 8000890:	690f      	ldr	r7, [r1, #16]
 8000892:	2f00      	cmp	r7, #0
 8000894:	d0a9      	beq.n	80007ea <__sflush_r+0x1a>
 8000896:	0793      	lsls	r3, r2, #30
 8000898:	680e      	ldr	r6, [r1, #0]
 800089a:	bf08      	it	eq
 800089c:	694b      	ldreq	r3, [r1, #20]
 800089e:	600f      	str	r7, [r1, #0]
 80008a0:	bf18      	it	ne
 80008a2:	2300      	movne	r3, #0
 80008a4:	eba6 0807 	sub.w	r8, r6, r7
 80008a8:	608b      	str	r3, [r1, #8]
 80008aa:	f1b8 0f00 	cmp.w	r8, #0
 80008ae:	dd9c      	ble.n	80007ea <__sflush_r+0x1a>
 80008b0:	4643      	mov	r3, r8
 80008b2:	463a      	mov	r2, r7
 80008b4:	6a21      	ldr	r1, [r4, #32]
 80008b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80008b8:	4628      	mov	r0, r5
 80008ba:	47b0      	blx	r6
 80008bc:	2800      	cmp	r0, #0
 80008be:	dc06      	bgt.n	80008ce <__sflush_r+0xfe>
 80008c0:	89a3      	ldrh	r3, [r4, #12]
 80008c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c6:	81a3      	strh	r3, [r4, #12]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008cc:	e78e      	b.n	80007ec <__sflush_r+0x1c>
 80008ce:	4407      	add	r7, r0
 80008d0:	eba8 0800 	sub.w	r8, r8, r0
 80008d4:	e7e9      	b.n	80008aa <__sflush_r+0xda>
 80008d6:	bf00      	nop
 80008d8:	20400001 	.word	0x20400001

080008dc <_fflush_r>:
 80008dc:	b538      	push	{r3, r4, r5, lr}
 80008de:	690b      	ldr	r3, [r1, #16]
 80008e0:	4605      	mov	r5, r0
 80008e2:	460c      	mov	r4, r1
 80008e4:	b1db      	cbz	r3, 800091e <_fflush_r+0x42>
 80008e6:	b118      	cbz	r0, 80008f0 <_fflush_r+0x14>
 80008e8:	6983      	ldr	r3, [r0, #24]
 80008ea:	b90b      	cbnz	r3, 80008f0 <_fflush_r+0x14>
 80008ec:	f000 f860 	bl	80009b0 <__sinit>
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <_fflush_r+0x48>)
 80008f2:	429c      	cmp	r4, r3
 80008f4:	d109      	bne.n	800090a <_fflush_r+0x2e>
 80008f6:	686c      	ldr	r4, [r5, #4]
 80008f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008fc:	b17b      	cbz	r3, 800091e <_fflush_r+0x42>
 80008fe:	4621      	mov	r1, r4
 8000900:	4628      	mov	r0, r5
 8000902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000906:	f7ff bf63 	b.w	80007d0 <__sflush_r>
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <_fflush_r+0x4c>)
 800090c:	429c      	cmp	r4, r3
 800090e:	d101      	bne.n	8000914 <_fflush_r+0x38>
 8000910:	68ac      	ldr	r4, [r5, #8]
 8000912:	e7f1      	b.n	80008f8 <_fflush_r+0x1c>
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <_fflush_r+0x50>)
 8000916:	429c      	cmp	r4, r3
 8000918:	bf08      	it	eq
 800091a:	68ec      	ldreq	r4, [r5, #12]
 800091c:	e7ec      	b.n	80008f8 <_fflush_r+0x1c>
 800091e:	2000      	movs	r0, #0
 8000920:	bd38      	pop	{r3, r4, r5, pc}
 8000922:	bf00      	nop
 8000924:	08000ea0 	.word	0x08000ea0
 8000928:	08000ec0 	.word	0x08000ec0
 800092c:	08000e80 	.word	0x08000e80

08000930 <std>:
 8000930:	2300      	movs	r3, #0
 8000932:	b510      	push	{r4, lr}
 8000934:	4604      	mov	r4, r0
 8000936:	e9c0 3300 	strd	r3, r3, [r0]
 800093a:	6083      	str	r3, [r0, #8]
 800093c:	8181      	strh	r1, [r0, #12]
 800093e:	6643      	str	r3, [r0, #100]	; 0x64
 8000940:	81c2      	strh	r2, [r0, #14]
 8000942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000946:	6183      	str	r3, [r0, #24]
 8000948:	4619      	mov	r1, r3
 800094a:	2208      	movs	r2, #8
 800094c:	305c      	adds	r0, #92	; 0x5c
 800094e:	f7ff fe13 	bl	8000578 <memset>
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <std+0x38>)
 8000954:	6263      	str	r3, [r4, #36]	; 0x24
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <std+0x3c>)
 8000958:	62a3      	str	r3, [r4, #40]	; 0x28
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <std+0x40>)
 800095c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <std+0x44>)
 8000960:	6224      	str	r4, [r4, #32]
 8000962:	6323      	str	r3, [r4, #48]	; 0x30
 8000964:	bd10      	pop	{r4, pc}
 8000966:	bf00      	nop
 8000968:	08000cfd 	.word	0x08000cfd
 800096c:	08000d1f 	.word	0x08000d1f
 8000970:	08000d57 	.word	0x08000d57
 8000974:	08000d7b 	.word	0x08000d7b

08000978 <_cleanup_r>:
 8000978:	4901      	ldr	r1, [pc, #4]	; (8000980 <_cleanup_r+0x8>)
 800097a:	f000 b885 	b.w	8000a88 <_fwalk_reent>
 800097e:	bf00      	nop
 8000980:	080008dd 	.word	0x080008dd

08000984 <__sfmoreglue>:
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	1e4a      	subs	r2, r1, #1
 8000988:	2568      	movs	r5, #104	; 0x68
 800098a:	4355      	muls	r5, r2
 800098c:	460e      	mov	r6, r1
 800098e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000992:	f000 f949 	bl	8000c28 <_malloc_r>
 8000996:	4604      	mov	r4, r0
 8000998:	b140      	cbz	r0, 80009ac <__sfmoreglue+0x28>
 800099a:	2100      	movs	r1, #0
 800099c:	e9c0 1600 	strd	r1, r6, [r0]
 80009a0:	300c      	adds	r0, #12
 80009a2:	60a0      	str	r0, [r4, #8]
 80009a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80009a8:	f7ff fde6 	bl	8000578 <memset>
 80009ac:	4620      	mov	r0, r4
 80009ae:	bd70      	pop	{r4, r5, r6, pc}

080009b0 <__sinit>:
 80009b0:	6983      	ldr	r3, [r0, #24]
 80009b2:	b510      	push	{r4, lr}
 80009b4:	4604      	mov	r4, r0
 80009b6:	bb33      	cbnz	r3, 8000a06 <__sinit+0x56>
 80009b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80009bc:	6503      	str	r3, [r0, #80]	; 0x50
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <__sinit+0x58>)
 80009c0:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <__sinit+0x5c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6282      	str	r2, [r0, #40]	; 0x28
 80009c6:	4298      	cmp	r0, r3
 80009c8:	bf04      	itt	eq
 80009ca:	2301      	moveq	r3, #1
 80009cc:	6183      	streq	r3, [r0, #24]
 80009ce:	f000 f81f 	bl	8000a10 <__sfp>
 80009d2:	6060      	str	r0, [r4, #4]
 80009d4:	4620      	mov	r0, r4
 80009d6:	f000 f81b 	bl	8000a10 <__sfp>
 80009da:	60a0      	str	r0, [r4, #8]
 80009dc:	4620      	mov	r0, r4
 80009de:	f000 f817 	bl	8000a10 <__sfp>
 80009e2:	2200      	movs	r2, #0
 80009e4:	60e0      	str	r0, [r4, #12]
 80009e6:	2104      	movs	r1, #4
 80009e8:	6860      	ldr	r0, [r4, #4]
 80009ea:	f7ff ffa1 	bl	8000930 <std>
 80009ee:	2201      	movs	r2, #1
 80009f0:	2109      	movs	r1, #9
 80009f2:	68a0      	ldr	r0, [r4, #8]
 80009f4:	f7ff ff9c 	bl	8000930 <std>
 80009f8:	2202      	movs	r2, #2
 80009fa:	2112      	movs	r1, #18
 80009fc:	68e0      	ldr	r0, [r4, #12]
 80009fe:	f7ff ff97 	bl	8000930 <std>
 8000a02:	2301      	movs	r3, #1
 8000a04:	61a3      	str	r3, [r4, #24]
 8000a06:	bd10      	pop	{r4, pc}
 8000a08:	08000e7c 	.word	0x08000e7c
 8000a0c:	08000979 	.word	0x08000979

08000a10 <__sfp>:
 8000a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <__sfp+0x70>)
 8000a14:	681e      	ldr	r6, [r3, #0]
 8000a16:	69b3      	ldr	r3, [r6, #24]
 8000a18:	4607      	mov	r7, r0
 8000a1a:	b913      	cbnz	r3, 8000a22 <__sfp+0x12>
 8000a1c:	4630      	mov	r0, r6
 8000a1e:	f7ff ffc7 	bl	80009b0 <__sinit>
 8000a22:	3648      	adds	r6, #72	; 0x48
 8000a24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	d503      	bpl.n	8000a34 <__sfp+0x24>
 8000a2c:	6833      	ldr	r3, [r6, #0]
 8000a2e:	b133      	cbz	r3, 8000a3e <__sfp+0x2e>
 8000a30:	6836      	ldr	r6, [r6, #0]
 8000a32:	e7f7      	b.n	8000a24 <__sfp+0x14>
 8000a34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a38:	b16d      	cbz	r5, 8000a56 <__sfp+0x46>
 8000a3a:	3468      	adds	r4, #104	; 0x68
 8000a3c:	e7f4      	b.n	8000a28 <__sfp+0x18>
 8000a3e:	2104      	movs	r1, #4
 8000a40:	4638      	mov	r0, r7
 8000a42:	f7ff ff9f 	bl	8000984 <__sfmoreglue>
 8000a46:	6030      	str	r0, [r6, #0]
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	d1f1      	bne.n	8000a30 <__sfp+0x20>
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	4604      	mov	r4, r0
 8000a52:	4620      	mov	r0, r4
 8000a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <__sfp+0x74>)
 8000a58:	6665      	str	r5, [r4, #100]	; 0x64
 8000a5a:	e9c4 5500 	strd	r5, r5, [r4]
 8000a5e:	60a5      	str	r5, [r4, #8]
 8000a60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000a64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000a68:	2208      	movs	r2, #8
 8000a6a:	4629      	mov	r1, r5
 8000a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a70:	f7ff fd82 	bl	8000578 <memset>
 8000a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a7c:	e7e9      	b.n	8000a52 <__sfp+0x42>
 8000a7e:	bf00      	nop
 8000a80:	08000e7c 	.word	0x08000e7c
 8000a84:	ffff0001 	.word	0xffff0001

08000a88 <_fwalk_reent>:
 8000a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a8c:	4680      	mov	r8, r0
 8000a8e:	4689      	mov	r9, r1
 8000a90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a94:	2600      	movs	r6, #0
 8000a96:	b914      	cbnz	r4, 8000a9e <_fwalk_reent+0x16>
 8000a98:	4630      	mov	r0, r6
 8000a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000aa2:	3f01      	subs	r7, #1
 8000aa4:	d501      	bpl.n	8000aaa <_fwalk_reent+0x22>
 8000aa6:	6824      	ldr	r4, [r4, #0]
 8000aa8:	e7f5      	b.n	8000a96 <_fwalk_reent+0xe>
 8000aaa:	89ab      	ldrh	r3, [r5, #12]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d907      	bls.n	8000ac0 <_fwalk_reent+0x38>
 8000ab0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	d003      	beq.n	8000ac0 <_fwalk_reent+0x38>
 8000ab8:	4629      	mov	r1, r5
 8000aba:	4640      	mov	r0, r8
 8000abc:	47c8      	blx	r9
 8000abe:	4306      	orrs	r6, r0
 8000ac0:	3568      	adds	r5, #104	; 0x68
 8000ac2:	e7ee      	b.n	8000aa2 <_fwalk_reent+0x1a>

08000ac4 <__swhatbuf_r>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	460e      	mov	r6, r1
 8000ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000acc:	2900      	cmp	r1, #0
 8000ace:	b096      	sub	sp, #88	; 0x58
 8000ad0:	4614      	mov	r4, r2
 8000ad2:	461d      	mov	r5, r3
 8000ad4:	da07      	bge.n	8000ae6 <__swhatbuf_r+0x22>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	602b      	str	r3, [r5, #0]
 8000ada:	89b3      	ldrh	r3, [r6, #12]
 8000adc:	061a      	lsls	r2, r3, #24
 8000ade:	d410      	bmi.n	8000b02 <__swhatbuf_r+0x3e>
 8000ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae4:	e00e      	b.n	8000b04 <__swhatbuf_r+0x40>
 8000ae6:	466a      	mov	r2, sp
 8000ae8:	f000 f96e 	bl	8000dc8 <_fstat_r>
 8000aec:	2800      	cmp	r0, #0
 8000aee:	dbf2      	blt.n	8000ad6 <__swhatbuf_r+0x12>
 8000af0:	9a01      	ldr	r2, [sp, #4]
 8000af2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000af6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000afa:	425a      	negs	r2, r3
 8000afc:	415a      	adcs	r2, r3
 8000afe:	602a      	str	r2, [r5, #0]
 8000b00:	e7ee      	b.n	8000ae0 <__swhatbuf_r+0x1c>
 8000b02:	2340      	movs	r3, #64	; 0x40
 8000b04:	2000      	movs	r0, #0
 8000b06:	6023      	str	r3, [r4, #0]
 8000b08:	b016      	add	sp, #88	; 0x58
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}

08000b0c <__smakebuf_r>:
 8000b0c:	898b      	ldrh	r3, [r1, #12]
 8000b0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b10:	079d      	lsls	r5, r3, #30
 8000b12:	4606      	mov	r6, r0
 8000b14:	460c      	mov	r4, r1
 8000b16:	d507      	bpl.n	8000b28 <__smakebuf_r+0x1c>
 8000b18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b1c:	6023      	str	r3, [r4, #0]
 8000b1e:	6123      	str	r3, [r4, #16]
 8000b20:	2301      	movs	r3, #1
 8000b22:	6163      	str	r3, [r4, #20]
 8000b24:	b002      	add	sp, #8
 8000b26:	bd70      	pop	{r4, r5, r6, pc}
 8000b28:	ab01      	add	r3, sp, #4
 8000b2a:	466a      	mov	r2, sp
 8000b2c:	f7ff ffca 	bl	8000ac4 <__swhatbuf_r>
 8000b30:	9900      	ldr	r1, [sp, #0]
 8000b32:	4605      	mov	r5, r0
 8000b34:	4630      	mov	r0, r6
 8000b36:	f000 f877 	bl	8000c28 <_malloc_r>
 8000b3a:	b948      	cbnz	r0, 8000b50 <__smakebuf_r+0x44>
 8000b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b40:	059a      	lsls	r2, r3, #22
 8000b42:	d4ef      	bmi.n	8000b24 <__smakebuf_r+0x18>
 8000b44:	f023 0303 	bic.w	r3, r3, #3
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	81a3      	strh	r3, [r4, #12]
 8000b4e:	e7e3      	b.n	8000b18 <__smakebuf_r+0xc>
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <__smakebuf_r+0x7c>)
 8000b52:	62b3      	str	r3, [r6, #40]	; 0x28
 8000b54:	89a3      	ldrh	r3, [r4, #12]
 8000b56:	6020      	str	r0, [r4, #0]
 8000b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5c:	81a3      	strh	r3, [r4, #12]
 8000b5e:	9b00      	ldr	r3, [sp, #0]
 8000b60:	6163      	str	r3, [r4, #20]
 8000b62:	9b01      	ldr	r3, [sp, #4]
 8000b64:	6120      	str	r0, [r4, #16]
 8000b66:	b15b      	cbz	r3, 8000b80 <__smakebuf_r+0x74>
 8000b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	f000 f93d 	bl	8000dec <_isatty_r>
 8000b72:	b128      	cbz	r0, 8000b80 <__smakebuf_r+0x74>
 8000b74:	89a3      	ldrh	r3, [r4, #12]
 8000b76:	f023 0303 	bic.w	r3, r3, #3
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	81a3      	strh	r3, [r4, #12]
 8000b80:	89a3      	ldrh	r3, [r4, #12]
 8000b82:	431d      	orrs	r5, r3
 8000b84:	81a5      	strh	r5, [r4, #12]
 8000b86:	e7cd      	b.n	8000b24 <__smakebuf_r+0x18>
 8000b88:	08000979 	.word	0x08000979

08000b8c <_free_r>:
 8000b8c:	b538      	push	{r3, r4, r5, lr}
 8000b8e:	4605      	mov	r5, r0
 8000b90:	2900      	cmp	r1, #0
 8000b92:	d045      	beq.n	8000c20 <_free_r+0x94>
 8000b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b98:	1f0c      	subs	r4, r1, #4
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bfb8      	it	lt
 8000b9e:	18e4      	addlt	r4, r4, r3
 8000ba0:	f000 f946 	bl	8000e30 <__malloc_lock>
 8000ba4:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <_free_r+0x98>)
 8000ba6:	6813      	ldr	r3, [r2, #0]
 8000ba8:	4610      	mov	r0, r2
 8000baa:	b933      	cbnz	r3, 8000bba <_free_r+0x2e>
 8000bac:	6063      	str	r3, [r4, #4]
 8000bae:	6014      	str	r4, [r2, #0]
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb6:	f000 b93c 	b.w	8000e32 <__malloc_unlock>
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	d90c      	bls.n	8000bd8 <_free_r+0x4c>
 8000bbe:	6821      	ldr	r1, [r4, #0]
 8000bc0:	1862      	adds	r2, r4, r1
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	bf04      	itt	eq
 8000bc6:	681a      	ldreq	r2, [r3, #0]
 8000bc8:	685b      	ldreq	r3, [r3, #4]
 8000bca:	6063      	str	r3, [r4, #4]
 8000bcc:	bf04      	itt	eq
 8000bce:	1852      	addeq	r2, r2, r1
 8000bd0:	6022      	streq	r2, [r4, #0]
 8000bd2:	6004      	str	r4, [r0, #0]
 8000bd4:	e7ec      	b.n	8000bb0 <_free_r+0x24>
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	b10a      	cbz	r2, 8000be0 <_free_r+0x54>
 8000bdc:	42a2      	cmp	r2, r4
 8000bde:	d9fa      	bls.n	8000bd6 <_free_r+0x4a>
 8000be0:	6819      	ldr	r1, [r3, #0]
 8000be2:	1858      	adds	r0, r3, r1
 8000be4:	42a0      	cmp	r0, r4
 8000be6:	d10b      	bne.n	8000c00 <_free_r+0x74>
 8000be8:	6820      	ldr	r0, [r4, #0]
 8000bea:	4401      	add	r1, r0
 8000bec:	1858      	adds	r0, r3, r1
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	6019      	str	r1, [r3, #0]
 8000bf2:	d1dd      	bne.n	8000bb0 <_free_r+0x24>
 8000bf4:	6810      	ldr	r0, [r2, #0]
 8000bf6:	6852      	ldr	r2, [r2, #4]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	4401      	add	r1, r0
 8000bfc:	6019      	str	r1, [r3, #0]
 8000bfe:	e7d7      	b.n	8000bb0 <_free_r+0x24>
 8000c00:	d902      	bls.n	8000c08 <_free_r+0x7c>
 8000c02:	230c      	movs	r3, #12
 8000c04:	602b      	str	r3, [r5, #0]
 8000c06:	e7d3      	b.n	8000bb0 <_free_r+0x24>
 8000c08:	6820      	ldr	r0, [r4, #0]
 8000c0a:	1821      	adds	r1, r4, r0
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	bf04      	itt	eq
 8000c10:	6811      	ldreq	r1, [r2, #0]
 8000c12:	6852      	ldreq	r2, [r2, #4]
 8000c14:	6062      	str	r2, [r4, #4]
 8000c16:	bf04      	itt	eq
 8000c18:	1809      	addeq	r1, r1, r0
 8000c1a:	6021      	streq	r1, [r4, #0]
 8000c1c:	605c      	str	r4, [r3, #4]
 8000c1e:	e7c7      	b.n	8000bb0 <_free_r+0x24>
 8000c20:	bd38      	pop	{r3, r4, r5, pc}
 8000c22:	bf00      	nop
 8000c24:	20000088 	.word	0x20000088

08000c28 <_malloc_r>:
 8000c28:	b570      	push	{r4, r5, r6, lr}
 8000c2a:	1ccd      	adds	r5, r1, #3
 8000c2c:	f025 0503 	bic.w	r5, r5, #3
 8000c30:	3508      	adds	r5, #8
 8000c32:	2d0c      	cmp	r5, #12
 8000c34:	bf38      	it	cc
 8000c36:	250c      	movcc	r5, #12
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	4606      	mov	r6, r0
 8000c3c:	db01      	blt.n	8000c42 <_malloc_r+0x1a>
 8000c3e:	42a9      	cmp	r1, r5
 8000c40:	d903      	bls.n	8000c4a <_malloc_r+0x22>
 8000c42:	230c      	movs	r3, #12
 8000c44:	6033      	str	r3, [r6, #0]
 8000c46:	2000      	movs	r0, #0
 8000c48:	bd70      	pop	{r4, r5, r6, pc}
 8000c4a:	f000 f8f1 	bl	8000e30 <__malloc_lock>
 8000c4e:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <_malloc_r+0xac>)
 8000c50:	6814      	ldr	r4, [r2, #0]
 8000c52:	4621      	mov	r1, r4
 8000c54:	b991      	cbnz	r1, 8000c7c <_malloc_r+0x54>
 8000c56:	4c20      	ldr	r4, [pc, #128]	; (8000cd8 <_malloc_r+0xb0>)
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	b91b      	cbnz	r3, 8000c64 <_malloc_r+0x3c>
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	f000 f83d 	bl	8000cdc <_sbrk_r>
 8000c62:	6020      	str	r0, [r4, #0]
 8000c64:	4629      	mov	r1, r5
 8000c66:	4630      	mov	r0, r6
 8000c68:	f000 f838 	bl	8000cdc <_sbrk_r>
 8000c6c:	1c43      	adds	r3, r0, #1
 8000c6e:	d124      	bne.n	8000cba <_malloc_r+0x92>
 8000c70:	230c      	movs	r3, #12
 8000c72:	6033      	str	r3, [r6, #0]
 8000c74:	4630      	mov	r0, r6
 8000c76:	f000 f8dc 	bl	8000e32 <__malloc_unlock>
 8000c7a:	e7e4      	b.n	8000c46 <_malloc_r+0x1e>
 8000c7c:	680b      	ldr	r3, [r1, #0]
 8000c7e:	1b5b      	subs	r3, r3, r5
 8000c80:	d418      	bmi.n	8000cb4 <_malloc_r+0x8c>
 8000c82:	2b0b      	cmp	r3, #11
 8000c84:	d90f      	bls.n	8000ca6 <_malloc_r+0x7e>
 8000c86:	600b      	str	r3, [r1, #0]
 8000c88:	50cd      	str	r5, [r1, r3]
 8000c8a:	18cc      	adds	r4, r1, r3
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	f000 f8d0 	bl	8000e32 <__malloc_unlock>
 8000c92:	f104 000b 	add.w	r0, r4, #11
 8000c96:	1d23      	adds	r3, r4, #4
 8000c98:	f020 0007 	bic.w	r0, r0, #7
 8000c9c:	1ac3      	subs	r3, r0, r3
 8000c9e:	d0d3      	beq.n	8000c48 <_malloc_r+0x20>
 8000ca0:	425a      	negs	r2, r3
 8000ca2:	50e2      	str	r2, [r4, r3]
 8000ca4:	e7d0      	b.n	8000c48 <_malloc_r+0x20>
 8000ca6:	428c      	cmp	r4, r1
 8000ca8:	684b      	ldr	r3, [r1, #4]
 8000caa:	bf16      	itet	ne
 8000cac:	6063      	strne	r3, [r4, #4]
 8000cae:	6013      	streq	r3, [r2, #0]
 8000cb0:	460c      	movne	r4, r1
 8000cb2:	e7eb      	b.n	8000c8c <_malloc_r+0x64>
 8000cb4:	460c      	mov	r4, r1
 8000cb6:	6849      	ldr	r1, [r1, #4]
 8000cb8:	e7cc      	b.n	8000c54 <_malloc_r+0x2c>
 8000cba:	1cc4      	adds	r4, r0, #3
 8000cbc:	f024 0403 	bic.w	r4, r4, #3
 8000cc0:	42a0      	cmp	r0, r4
 8000cc2:	d005      	beq.n	8000cd0 <_malloc_r+0xa8>
 8000cc4:	1a21      	subs	r1, r4, r0
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	f000 f808 	bl	8000cdc <_sbrk_r>
 8000ccc:	3001      	adds	r0, #1
 8000cce:	d0cf      	beq.n	8000c70 <_malloc_r+0x48>
 8000cd0:	6025      	str	r5, [r4, #0]
 8000cd2:	e7db      	b.n	8000c8c <_malloc_r+0x64>
 8000cd4:	20000088 	.word	0x20000088
 8000cd8:	2000008c 	.word	0x2000008c

08000cdc <_sbrk_r>:
 8000cdc:	b538      	push	{r3, r4, r5, lr}
 8000cde:	4c06      	ldr	r4, [pc, #24]	; (8000cf8 <_sbrk_r+0x1c>)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	4605      	mov	r5, r0
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	6023      	str	r3, [r4, #0]
 8000ce8:	f7ff fb66 	bl	80003b8 <_sbrk>
 8000cec:	1c43      	adds	r3, r0, #1
 8000cee:	d102      	bne.n	8000cf6 <_sbrk_r+0x1a>
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	b103      	cbz	r3, 8000cf6 <_sbrk_r+0x1a>
 8000cf4:	602b      	str	r3, [r5, #0]
 8000cf6:	bd38      	pop	{r3, r4, r5, pc}
 8000cf8:	20000094 	.word	0x20000094

08000cfc <__sread>:
 8000cfc:	b510      	push	{r4, lr}
 8000cfe:	460c      	mov	r4, r1
 8000d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d04:	f000 f896 	bl	8000e34 <_read_r>
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	bfab      	itete	ge
 8000d0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8000d10:	181b      	addge	r3, r3, r0
 8000d12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d16:	bfac      	ite	ge
 8000d18:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d1a:	81a3      	strhlt	r3, [r4, #12]
 8000d1c:	bd10      	pop	{r4, pc}

08000d1e <__swrite>:
 8000d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d22:	461f      	mov	r7, r3
 8000d24:	898b      	ldrh	r3, [r1, #12]
 8000d26:	05db      	lsls	r3, r3, #23
 8000d28:	4605      	mov	r5, r0
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	4616      	mov	r6, r2
 8000d2e:	d505      	bpl.n	8000d3c <__swrite+0x1e>
 8000d30:	2302      	movs	r3, #2
 8000d32:	2200      	movs	r2, #0
 8000d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d38:	f000 f868 	bl	8000e0c <_lseek_r>
 8000d3c:	89a3      	ldrh	r3, [r4, #12]
 8000d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d46:	81a3      	strh	r3, [r4, #12]
 8000d48:	4632      	mov	r2, r6
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4628      	mov	r0, r5
 8000d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d52:	f000 b817 	b.w	8000d84 <_write_r>

08000d56 <__sseek>:
 8000d56:	b510      	push	{r4, lr}
 8000d58:	460c      	mov	r4, r1
 8000d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d5e:	f000 f855 	bl	8000e0c <_lseek_r>
 8000d62:	1c43      	adds	r3, r0, #1
 8000d64:	89a3      	ldrh	r3, [r4, #12]
 8000d66:	bf15      	itete	ne
 8000d68:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d72:	81a3      	strheq	r3, [r4, #12]
 8000d74:	bf18      	it	ne
 8000d76:	81a3      	strhne	r3, [r4, #12]
 8000d78:	bd10      	pop	{r4, pc}

08000d7a <__sclose>:
 8000d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d7e:	f000 b813 	b.w	8000da8 <_close_r>
	...

08000d84 <_write_r>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4c07      	ldr	r4, [pc, #28]	; (8000da4 <_write_r+0x20>)
 8000d88:	4605      	mov	r5, r0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	2200      	movs	r2, #0
 8000d90:	6022      	str	r2, [r4, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	f7ff fa45 	bl	8000222 <_write>
 8000d98:	1c43      	adds	r3, r0, #1
 8000d9a:	d102      	bne.n	8000da2 <_write_r+0x1e>
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	b103      	cbz	r3, 8000da2 <_write_r+0x1e>
 8000da0:	602b      	str	r3, [r5, #0]
 8000da2:	bd38      	pop	{r3, r4, r5, pc}
 8000da4:	20000094 	.word	0x20000094

08000da8 <_close_r>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	4c06      	ldr	r4, [pc, #24]	; (8000dc4 <_close_r+0x1c>)
 8000dac:	2300      	movs	r3, #0
 8000dae:	4605      	mov	r5, r0
 8000db0:	4608      	mov	r0, r1
 8000db2:	6023      	str	r3, [r4, #0]
 8000db4:	f7ff facb 	bl	800034e <_close>
 8000db8:	1c43      	adds	r3, r0, #1
 8000dba:	d102      	bne.n	8000dc2 <_close_r+0x1a>
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	b103      	cbz	r3, 8000dc2 <_close_r+0x1a>
 8000dc0:	602b      	str	r3, [r5, #0]
 8000dc2:	bd38      	pop	{r3, r4, r5, pc}
 8000dc4:	20000094 	.word	0x20000094

08000dc8 <_fstat_r>:
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	4c07      	ldr	r4, [pc, #28]	; (8000de8 <_fstat_r+0x20>)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	4605      	mov	r5, r0
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	6023      	str	r3, [r4, #0]
 8000dd6:	f7ff fac6 	bl	8000366 <_fstat>
 8000dda:	1c43      	adds	r3, r0, #1
 8000ddc:	d102      	bne.n	8000de4 <_fstat_r+0x1c>
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	b103      	cbz	r3, 8000de4 <_fstat_r+0x1c>
 8000de2:	602b      	str	r3, [r5, #0]
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop
 8000de8:	20000094 	.word	0x20000094

08000dec <_isatty_r>:
 8000dec:	b538      	push	{r3, r4, r5, lr}
 8000dee:	4c06      	ldr	r4, [pc, #24]	; (8000e08 <_isatty_r+0x1c>)
 8000df0:	2300      	movs	r3, #0
 8000df2:	4605      	mov	r5, r0
 8000df4:	4608      	mov	r0, r1
 8000df6:	6023      	str	r3, [r4, #0]
 8000df8:	f7ff fac5 	bl	8000386 <_isatty>
 8000dfc:	1c43      	adds	r3, r0, #1
 8000dfe:	d102      	bne.n	8000e06 <_isatty_r+0x1a>
 8000e00:	6823      	ldr	r3, [r4, #0]
 8000e02:	b103      	cbz	r3, 8000e06 <_isatty_r+0x1a>
 8000e04:	602b      	str	r3, [r5, #0]
 8000e06:	bd38      	pop	{r3, r4, r5, pc}
 8000e08:	20000094 	.word	0x20000094

08000e0c <_lseek_r>:
 8000e0c:	b538      	push	{r3, r4, r5, lr}
 8000e0e:	4c07      	ldr	r4, [pc, #28]	; (8000e2c <_lseek_r+0x20>)
 8000e10:	4605      	mov	r5, r0
 8000e12:	4608      	mov	r0, r1
 8000e14:	4611      	mov	r1, r2
 8000e16:	2200      	movs	r2, #0
 8000e18:	6022      	str	r2, [r4, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f7ff fabe 	bl	800039c <_lseek>
 8000e20:	1c43      	adds	r3, r0, #1
 8000e22:	d102      	bne.n	8000e2a <_lseek_r+0x1e>
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	b103      	cbz	r3, 8000e2a <_lseek_r+0x1e>
 8000e28:	602b      	str	r3, [r5, #0]
 8000e2a:	bd38      	pop	{r3, r4, r5, pc}
 8000e2c:	20000094 	.word	0x20000094

08000e30 <__malloc_lock>:
 8000e30:	4770      	bx	lr

08000e32 <__malloc_unlock>:
 8000e32:	4770      	bx	lr

08000e34 <_read_r>:
 8000e34:	b538      	push	{r3, r4, r5, lr}
 8000e36:	4c07      	ldr	r4, [pc, #28]	; (8000e54 <_read_r+0x20>)
 8000e38:	4605      	mov	r5, r0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	2200      	movs	r2, #0
 8000e40:	6022      	str	r2, [r4, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	f7ff fa66 	bl	8000314 <_read>
 8000e48:	1c43      	adds	r3, r0, #1
 8000e4a:	d102      	bne.n	8000e52 <_read_r+0x1e>
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	b103      	cbz	r3, 8000e52 <_read_r+0x1e>
 8000e50:	602b      	str	r3, [r5, #0]
 8000e52:	bd38      	pop	{r3, r4, r5, pc}
 8000e54:	20000094 	.word	0x20000094

08000e58 <_init>:
 8000e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5a:	bf00      	nop
 8000e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e5e:	bc08      	pop	{r3}
 8000e60:	469e      	mov	lr, r3
 8000e62:	4770      	bx	lr

08000e64 <_fini>:
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e66:	bf00      	nop
 8000e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e6a:	bc08      	pop	{r3}
 8000e6c:	469e      	mov	lr, r3
 8000e6e:	4770      	bx	lr
