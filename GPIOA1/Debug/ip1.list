
ip1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cf8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08000e8c  08000e8c  00010e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000efc  08000efc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08000efc  08000efc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000efc  08000efc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000efc  08000efc  00010efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f00  08000f00  00010f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08000f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000068  08000f6c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08000f6c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004716  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d6c  00000000  00000000  000247ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003b8  00000000  00000000  00025520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000340  00000000  00000000  000258d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001575f  00000000  00000000  00025c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000033e1  00000000  00000000  0003b377  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082802  00000000  00000000  0003e758  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0f5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012d4  00000000  00000000  000c0fd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000e74 	.word	0x08000e74

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08000e74 	.word	0x08000e74

080001d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001e4:	f003 0301 	and.w	r3, r3, #1
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d013      	beq.n	8000214 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d00b      	beq.n	8000214 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	e000      	b.n	8000200 <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000200:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d0f9      	beq.n	80001fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800020a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	b2d2      	uxtb	r2, r2
 8000212:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000214:	687b      	ldr	r3, [r7, #4]
}
 8000216:	4618      	mov	r0, r3
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr

08000222 <_write>:
#include "main.h"
#include<stdio.h>
int _write(int file, char *ptr, int len)
{
 8000222:	b580      	push	{r7, lr}
 8000224:	b086      	sub	sp, #24
 8000226:	af00      	add	r7, sp, #0
 8000228:	60f8      	str	r0, [r7, #12]
 800022a:	60b9      	str	r1, [r7, #8]
 800022c:	607a      	str	r2, [r7, #4]
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
 8000232:	e009      	b.n	8000248 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	1c5a      	adds	r2, r3, #1
 8000238:	60ba      	str	r2, [r7, #8]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ffc9 	bl	80001d4 <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	3301      	adds	r3, #1
 8000246:	617b      	str	r3, [r7, #20]
 8000248:	697a      	ldr	r2, [r7, #20]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	429a      	cmp	r2, r3
 800024e:	dbf1      	blt.n	8000234 <_write+0x12>
    }
    return len;
 8000250:	687b      	ldr	r3, [r7, #4]
}
 8000252:	4618      	mov	r0, r3
 8000254:	3718      	adds	r7, #24
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	printf("am handler\n");
 8000260:	4805      	ldr	r0, [pc, #20]	; (8000278 <EXTI1_IRQHandler+0x1c>)
 8000262:	f000 f9fb 	bl	800065c <puts>


	EXTI->PR |=EXTI_PR_PR1;
 8000266:	4b05      	ldr	r3, [pc, #20]	; (800027c <EXTI1_IRQHandler+0x20>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a04      	ldr	r2, [pc, #16]	; (800027c <EXTI1_IRQHandler+0x20>)
 800026c:	f043 0302 	orr.w	r3, r3, #2
 8000270:	6153      	str	r3, [r2, #20]

}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	08000e8c 	.word	0x08000e8c
 800027c:	40013c00 	.word	0x40013c00

08000280 <main>:
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <main+0x48>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <main+0x48>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |=RCC_AHB1ENR_GPIOAEN;
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <main+0x48>)
 8000292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000294:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <main+0x48>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |=GPIO_MODER_MODER1_0;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <main+0x4c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <main+0x4c>)
 80002a2:	f043 0304 	orr.w	r3, r3, #4
 80002a6:	6013      	str	r3, [r2, #0]
	EXTI->IMR    |= EXTI_IMR_MR1;
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <main+0x50>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a08      	ldr	r2, [pc, #32]	; (80002d0 <main+0x50>)
 80002ae:	f043 0302 	orr.w	r3, r3, #2
 80002b2:	6013      	str	r3, [r2, #0]
	EXTI->RTSR   |= EXTI_RTSR_TR1;
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <main+0x50>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <main+0x50>)
 80002ba:	f043 0302 	orr.w	r3, r3, #2
 80002be:	6093      	str	r3, [r2, #8]
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80002c0:	2007      	movs	r0, #7
 80002c2:	f000 f92f 	bl	8000524 <HAL_NVIC_EnableIRQ>

 while (1);
 80002c6:	e7fe      	b.n	80002c6 <main+0x46>
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40013c00 	.word	0x40013c00

080002d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr

080002e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002e6:	e7fe      	b.n	80002e6 <HardFault_Handler+0x4>

080002e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <MemManage_Handler+0x4>

080002ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <BusFault_Handler+0x4>

080002f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <UsageFault_Handler+0x4>

080002fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr

08000316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr

08000324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000328:	f000 f8ca 	bl	80004c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}

08000330 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]
 8000340:	e00a      	b.n	8000358 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000342:	f3af 8000 	nop.w
 8000346:	4601      	mov	r1, r0
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	1c5a      	adds	r2, r3, #1
 800034c:	60ba      	str	r2, [r7, #8]
 800034e:	b2ca      	uxtb	r2, r1
 8000350:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000352:	697b      	ldr	r3, [r7, #20]
 8000354:	3301      	adds	r3, #1
 8000356:	617b      	str	r3, [r7, #20]
 8000358:	697a      	ldr	r2, [r7, #20]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	429a      	cmp	r2, r3
 800035e:	dbf0      	blt.n	8000342 <_read+0x12>
	}

return len;
 8000360:	687b      	ldr	r3, [r7, #4]
}
 8000362:	4618      	mov	r0, r3
 8000364:	3718      	adds	r7, #24
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <_close>:
	}
	return len;
}

int _close(int file)
{
 800036a:	b480      	push	{r7}
 800036c:	b083      	sub	sp, #12
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
	return -1;
 8000372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000376:	4618      	mov	r0, r3
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
 800038a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000392:	605a      	str	r2, [r3, #4]
	return 0;
 8000394:	2300      	movs	r3, #0
}
 8000396:	4618      	mov	r0, r3
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <_isatty>:

int _isatty(int file)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
	return 1;
 80003aa:	2301      	movs	r3, #1
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
	return 0;
 80003c4:	2300      	movs	r3, #0
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
	...

080003d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003dc:	4a14      	ldr	r2, [pc, #80]	; (8000430 <_sbrk+0x5c>)
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <_sbrk+0x60>)
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003e8:	4b13      	ldr	r3, [pc, #76]	; (8000438 <_sbrk+0x64>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d102      	bne.n	80003f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <_sbrk+0x64>)
 80003f2:	4a12      	ldr	r2, [pc, #72]	; (800043c <_sbrk+0x68>)
 80003f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <_sbrk+0x64>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	693a      	ldr	r2, [r7, #16]
 8000400:	429a      	cmp	r2, r3
 8000402:	d207      	bcs.n	8000414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000404:	f000 f89c 	bl	8000540 <__errno>
 8000408:	4602      	mov	r2, r0
 800040a:	230c      	movs	r3, #12
 800040c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800040e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000412:	e009      	b.n	8000428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <_sbrk+0x64>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800041a:	4b07      	ldr	r3, [pc, #28]	; (8000438 <_sbrk+0x64>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4413      	add	r3, r2
 8000422:	4a05      	ldr	r2, [pc, #20]	; (8000438 <_sbrk+0x64>)
 8000424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000426:	68fb      	ldr	r3, [r7, #12]
}
 8000428:	4618      	mov	r0, r3
 800042a:	3718      	adds	r7, #24
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20018000 	.word	0x20018000
 8000434:	00000400 	.word	0x00000400
 8000438:	20000084 	.word	0x20000084
 800043c:	20000098 	.word	0x20000098

08000440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <SystemInit+0x28>)
 8000446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800044a:	4a07      	ldr	r2, [pc, #28]	; (8000468 <SystemInit+0x28>)
 800044c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <SystemInit+0x28>)
 8000456:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800045a:	609a      	str	r2, [r3, #8]
#endif
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	e000ed00 	.word	0xe000ed00

0800046c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800046c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000470:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000472:	e003      	b.n	800047c <LoopCopyDataInit>

08000474 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000476:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000478:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800047a:	3104      	adds	r1, #4

0800047c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800047c:	480b      	ldr	r0, [pc, #44]	; (80004ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000480:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000482:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000484:	d3f6      	bcc.n	8000474 <CopyDataInit>
  ldr  r2, =_sbss
 8000486:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000488:	e002      	b.n	8000490 <LoopFillZerobss>

0800048a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800048a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800048c:	f842 3b04 	str.w	r3, [r2], #4

08000490 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000492:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000494:	d3f9      	bcc.n	800048a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000496:	f7ff ffd3 	bl	8000440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800049a:	f000 f857 	bl	800054c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800049e:	f7ff feef 	bl	8000280 <main>
  bx  lr    
 80004a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004a4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80004a8:	08000f04 	.word	0x08000f04
  ldr  r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004b0:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 80004b4:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 80004b8:	20000098 	.word	0x20000098

080004bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004bc:	e7fe      	b.n	80004bc <ADC_IRQHandler>
	...

080004c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <HAL_IncTick+0x20>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	461a      	mov	r2, r3
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <HAL_IncTick+0x24>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4413      	add	r3, r2
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <HAL_IncTick+0x24>)
 80004d2:	6013      	str	r3, [r2, #0]
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000000 	.word	0x20000000
 80004e4:	20000090 	.word	0x20000090

080004e8 <__NVIC_EnableIRQ>:
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	db0b      	blt.n	8000512 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	f003 021f 	and.w	r2, r3, #31
 8000500:	4907      	ldr	r1, [pc, #28]	; (8000520 <__NVIC_EnableIRQ+0x38>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	095b      	lsrs	r3, r3, #5
 8000508:	2001      	movs	r0, #1
 800050a:	fa00 f202 	lsl.w	r2, r0, r2
 800050e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000e100 	.word	0xe000e100

08000524 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800052e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ffd8 	bl	80004e8 <__NVIC_EnableIRQ>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <__errno>:
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <__errno+0x8>)
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000004 	.word	0x20000004

0800054c <__libc_init_array>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	4e0d      	ldr	r6, [pc, #52]	; (8000584 <__libc_init_array+0x38>)
 8000550:	4c0d      	ldr	r4, [pc, #52]	; (8000588 <__libc_init_array+0x3c>)
 8000552:	1ba4      	subs	r4, r4, r6
 8000554:	10a4      	asrs	r4, r4, #2
 8000556:	2500      	movs	r5, #0
 8000558:	42a5      	cmp	r5, r4
 800055a:	d109      	bne.n	8000570 <__libc_init_array+0x24>
 800055c:	4e0b      	ldr	r6, [pc, #44]	; (800058c <__libc_init_array+0x40>)
 800055e:	4c0c      	ldr	r4, [pc, #48]	; (8000590 <__libc_init_array+0x44>)
 8000560:	f000 fc88 	bl	8000e74 <_init>
 8000564:	1ba4      	subs	r4, r4, r6
 8000566:	10a4      	asrs	r4, r4, #2
 8000568:	2500      	movs	r5, #0
 800056a:	42a5      	cmp	r5, r4
 800056c:	d105      	bne.n	800057a <__libc_init_array+0x2e>
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000574:	4798      	blx	r3
 8000576:	3501      	adds	r5, #1
 8000578:	e7ee      	b.n	8000558 <__libc_init_array+0xc>
 800057a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800057e:	4798      	blx	r3
 8000580:	3501      	adds	r5, #1
 8000582:	e7f2      	b.n	800056a <__libc_init_array+0x1e>
 8000584:	08000efc 	.word	0x08000efc
 8000588:	08000efc 	.word	0x08000efc
 800058c:	08000efc 	.word	0x08000efc
 8000590:	08000f00 	.word	0x08000f00

08000594 <memset>:
 8000594:	4402      	add	r2, r0
 8000596:	4603      	mov	r3, r0
 8000598:	4293      	cmp	r3, r2
 800059a:	d100      	bne.n	800059e <memset+0xa>
 800059c:	4770      	bx	lr
 800059e:	f803 1b01 	strb.w	r1, [r3], #1
 80005a2:	e7f9      	b.n	8000598 <memset+0x4>

080005a4 <_puts_r>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	460e      	mov	r6, r1
 80005a8:	4605      	mov	r5, r0
 80005aa:	b118      	cbz	r0, 80005b4 <_puts_r+0x10>
 80005ac:	6983      	ldr	r3, [r0, #24]
 80005ae:	b90b      	cbnz	r3, 80005b4 <_puts_r+0x10>
 80005b0:	f000 fa0c 	bl	80009cc <__sinit>
 80005b4:	69ab      	ldr	r3, [r5, #24]
 80005b6:	68ac      	ldr	r4, [r5, #8]
 80005b8:	b913      	cbnz	r3, 80005c0 <_puts_r+0x1c>
 80005ba:	4628      	mov	r0, r5
 80005bc:	f000 fa06 	bl	80009cc <__sinit>
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <_puts_r+0xac>)
 80005c2:	429c      	cmp	r4, r3
 80005c4:	d117      	bne.n	80005f6 <_puts_r+0x52>
 80005c6:	686c      	ldr	r4, [r5, #4]
 80005c8:	89a3      	ldrh	r3, [r4, #12]
 80005ca:	071b      	lsls	r3, r3, #28
 80005cc:	d51d      	bpl.n	800060a <_puts_r+0x66>
 80005ce:	6923      	ldr	r3, [r4, #16]
 80005d0:	b1db      	cbz	r3, 800060a <_puts_r+0x66>
 80005d2:	3e01      	subs	r6, #1
 80005d4:	68a3      	ldr	r3, [r4, #8]
 80005d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80005da:	3b01      	subs	r3, #1
 80005dc:	60a3      	str	r3, [r4, #8]
 80005de:	b9e9      	cbnz	r1, 800061c <_puts_r+0x78>
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	da2e      	bge.n	8000642 <_puts_r+0x9e>
 80005e4:	4622      	mov	r2, r4
 80005e6:	210a      	movs	r1, #10
 80005e8:	4628      	mov	r0, r5
 80005ea:	f000 f83f 	bl	800066c <__swbuf_r>
 80005ee:	3001      	adds	r0, #1
 80005f0:	d011      	beq.n	8000616 <_puts_r+0x72>
 80005f2:	200a      	movs	r0, #10
 80005f4:	e011      	b.n	800061a <_puts_r+0x76>
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <_puts_r+0xb0>)
 80005f8:	429c      	cmp	r4, r3
 80005fa:	d101      	bne.n	8000600 <_puts_r+0x5c>
 80005fc:	68ac      	ldr	r4, [r5, #8]
 80005fe:	e7e3      	b.n	80005c8 <_puts_r+0x24>
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <_puts_r+0xb4>)
 8000602:	429c      	cmp	r4, r3
 8000604:	bf08      	it	eq
 8000606:	68ec      	ldreq	r4, [r5, #12]
 8000608:	e7de      	b.n	80005c8 <_puts_r+0x24>
 800060a:	4621      	mov	r1, r4
 800060c:	4628      	mov	r0, r5
 800060e:	f000 f87f 	bl	8000710 <__swsetup_r>
 8000612:	2800      	cmp	r0, #0
 8000614:	d0dd      	beq.n	80005d2 <_puts_r+0x2e>
 8000616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	2b00      	cmp	r3, #0
 800061e:	da04      	bge.n	800062a <_puts_r+0x86>
 8000620:	69a2      	ldr	r2, [r4, #24]
 8000622:	429a      	cmp	r2, r3
 8000624:	dc06      	bgt.n	8000634 <_puts_r+0x90>
 8000626:	290a      	cmp	r1, #10
 8000628:	d004      	beq.n	8000634 <_puts_r+0x90>
 800062a:	6823      	ldr	r3, [r4, #0]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	6022      	str	r2, [r4, #0]
 8000630:	7019      	strb	r1, [r3, #0]
 8000632:	e7cf      	b.n	80005d4 <_puts_r+0x30>
 8000634:	4622      	mov	r2, r4
 8000636:	4628      	mov	r0, r5
 8000638:	f000 f818 	bl	800066c <__swbuf_r>
 800063c:	3001      	adds	r0, #1
 800063e:	d1c9      	bne.n	80005d4 <_puts_r+0x30>
 8000640:	e7e9      	b.n	8000616 <_puts_r+0x72>
 8000642:	6823      	ldr	r3, [r4, #0]
 8000644:	200a      	movs	r0, #10
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	6022      	str	r2, [r4, #0]
 800064a:	7018      	strb	r0, [r3, #0]
 800064c:	e7e5      	b.n	800061a <_puts_r+0x76>
 800064e:	bf00      	nop
 8000650:	08000ebc 	.word	0x08000ebc
 8000654:	08000edc 	.word	0x08000edc
 8000658:	08000e9c 	.word	0x08000e9c

0800065c <puts>:
 800065c:	4b02      	ldr	r3, [pc, #8]	; (8000668 <puts+0xc>)
 800065e:	4601      	mov	r1, r0
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	f7ff bf9f 	b.w	80005a4 <_puts_r>
 8000666:	bf00      	nop
 8000668:	20000004 	.word	0x20000004

0800066c <__swbuf_r>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	460e      	mov	r6, r1
 8000670:	4614      	mov	r4, r2
 8000672:	4605      	mov	r5, r0
 8000674:	b118      	cbz	r0, 800067e <__swbuf_r+0x12>
 8000676:	6983      	ldr	r3, [r0, #24]
 8000678:	b90b      	cbnz	r3, 800067e <__swbuf_r+0x12>
 800067a:	f000 f9a7 	bl	80009cc <__sinit>
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <__swbuf_r+0x98>)
 8000680:	429c      	cmp	r4, r3
 8000682:	d12a      	bne.n	80006da <__swbuf_r+0x6e>
 8000684:	686c      	ldr	r4, [r5, #4]
 8000686:	69a3      	ldr	r3, [r4, #24]
 8000688:	60a3      	str	r3, [r4, #8]
 800068a:	89a3      	ldrh	r3, [r4, #12]
 800068c:	071a      	lsls	r2, r3, #28
 800068e:	d52e      	bpl.n	80006ee <__swbuf_r+0x82>
 8000690:	6923      	ldr	r3, [r4, #16]
 8000692:	b363      	cbz	r3, 80006ee <__swbuf_r+0x82>
 8000694:	6923      	ldr	r3, [r4, #16]
 8000696:	6820      	ldr	r0, [r4, #0]
 8000698:	1ac0      	subs	r0, r0, r3
 800069a:	6963      	ldr	r3, [r4, #20]
 800069c:	b2f6      	uxtb	r6, r6
 800069e:	4283      	cmp	r3, r0
 80006a0:	4637      	mov	r7, r6
 80006a2:	dc04      	bgt.n	80006ae <__swbuf_r+0x42>
 80006a4:	4621      	mov	r1, r4
 80006a6:	4628      	mov	r0, r5
 80006a8:	f000 f926 	bl	80008f8 <_fflush_r>
 80006ac:	bb28      	cbnz	r0, 80006fa <__swbuf_r+0x8e>
 80006ae:	68a3      	ldr	r3, [r4, #8]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	60a3      	str	r3, [r4, #8]
 80006b4:	6823      	ldr	r3, [r4, #0]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	6022      	str	r2, [r4, #0]
 80006ba:	701e      	strb	r6, [r3, #0]
 80006bc:	6963      	ldr	r3, [r4, #20]
 80006be:	3001      	adds	r0, #1
 80006c0:	4283      	cmp	r3, r0
 80006c2:	d004      	beq.n	80006ce <__swbuf_r+0x62>
 80006c4:	89a3      	ldrh	r3, [r4, #12]
 80006c6:	07db      	lsls	r3, r3, #31
 80006c8:	d519      	bpl.n	80006fe <__swbuf_r+0x92>
 80006ca:	2e0a      	cmp	r6, #10
 80006cc:	d117      	bne.n	80006fe <__swbuf_r+0x92>
 80006ce:	4621      	mov	r1, r4
 80006d0:	4628      	mov	r0, r5
 80006d2:	f000 f911 	bl	80008f8 <_fflush_r>
 80006d6:	b190      	cbz	r0, 80006fe <__swbuf_r+0x92>
 80006d8:	e00f      	b.n	80006fa <__swbuf_r+0x8e>
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <__swbuf_r+0x9c>)
 80006dc:	429c      	cmp	r4, r3
 80006de:	d101      	bne.n	80006e4 <__swbuf_r+0x78>
 80006e0:	68ac      	ldr	r4, [r5, #8]
 80006e2:	e7d0      	b.n	8000686 <__swbuf_r+0x1a>
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <__swbuf_r+0xa0>)
 80006e6:	429c      	cmp	r4, r3
 80006e8:	bf08      	it	eq
 80006ea:	68ec      	ldreq	r4, [r5, #12]
 80006ec:	e7cb      	b.n	8000686 <__swbuf_r+0x1a>
 80006ee:	4621      	mov	r1, r4
 80006f0:	4628      	mov	r0, r5
 80006f2:	f000 f80d 	bl	8000710 <__swsetup_r>
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d0cc      	beq.n	8000694 <__swbuf_r+0x28>
 80006fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80006fe:	4638      	mov	r0, r7
 8000700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000702:	bf00      	nop
 8000704:	08000ebc 	.word	0x08000ebc
 8000708:	08000edc 	.word	0x08000edc
 800070c:	08000e9c 	.word	0x08000e9c

08000710 <__swsetup_r>:
 8000710:	4b32      	ldr	r3, [pc, #200]	; (80007dc <__swsetup_r+0xcc>)
 8000712:	b570      	push	{r4, r5, r6, lr}
 8000714:	681d      	ldr	r5, [r3, #0]
 8000716:	4606      	mov	r6, r0
 8000718:	460c      	mov	r4, r1
 800071a:	b125      	cbz	r5, 8000726 <__swsetup_r+0x16>
 800071c:	69ab      	ldr	r3, [r5, #24]
 800071e:	b913      	cbnz	r3, 8000726 <__swsetup_r+0x16>
 8000720:	4628      	mov	r0, r5
 8000722:	f000 f953 	bl	80009cc <__sinit>
 8000726:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <__swsetup_r+0xd0>)
 8000728:	429c      	cmp	r4, r3
 800072a:	d10f      	bne.n	800074c <__swsetup_r+0x3c>
 800072c:	686c      	ldr	r4, [r5, #4]
 800072e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000732:	b29a      	uxth	r2, r3
 8000734:	0715      	lsls	r5, r2, #28
 8000736:	d42c      	bmi.n	8000792 <__swsetup_r+0x82>
 8000738:	06d0      	lsls	r0, r2, #27
 800073a:	d411      	bmi.n	8000760 <__swsetup_r+0x50>
 800073c:	2209      	movs	r2, #9
 800073e:	6032      	str	r2, [r6, #0]
 8000740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000744:	81a3      	strh	r3, [r4, #12]
 8000746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800074a:	e03e      	b.n	80007ca <__swsetup_r+0xba>
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <__swsetup_r+0xd4>)
 800074e:	429c      	cmp	r4, r3
 8000750:	d101      	bne.n	8000756 <__swsetup_r+0x46>
 8000752:	68ac      	ldr	r4, [r5, #8]
 8000754:	e7eb      	b.n	800072e <__swsetup_r+0x1e>
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <__swsetup_r+0xd8>)
 8000758:	429c      	cmp	r4, r3
 800075a:	bf08      	it	eq
 800075c:	68ec      	ldreq	r4, [r5, #12]
 800075e:	e7e6      	b.n	800072e <__swsetup_r+0x1e>
 8000760:	0751      	lsls	r1, r2, #29
 8000762:	d512      	bpl.n	800078a <__swsetup_r+0x7a>
 8000764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000766:	b141      	cbz	r1, 800077a <__swsetup_r+0x6a>
 8000768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800076c:	4299      	cmp	r1, r3
 800076e:	d002      	beq.n	8000776 <__swsetup_r+0x66>
 8000770:	4630      	mov	r0, r6
 8000772:	f000 fa19 	bl	8000ba8 <_free_r>
 8000776:	2300      	movs	r3, #0
 8000778:	6363      	str	r3, [r4, #52]	; 0x34
 800077a:	89a3      	ldrh	r3, [r4, #12]
 800077c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000780:	81a3      	strh	r3, [r4, #12]
 8000782:	2300      	movs	r3, #0
 8000784:	6063      	str	r3, [r4, #4]
 8000786:	6923      	ldr	r3, [r4, #16]
 8000788:	6023      	str	r3, [r4, #0]
 800078a:	89a3      	ldrh	r3, [r4, #12]
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	81a3      	strh	r3, [r4, #12]
 8000792:	6923      	ldr	r3, [r4, #16]
 8000794:	b94b      	cbnz	r3, 80007aa <__swsetup_r+0x9a>
 8000796:	89a3      	ldrh	r3, [r4, #12]
 8000798:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800079c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007a0:	d003      	beq.n	80007aa <__swsetup_r+0x9a>
 80007a2:	4621      	mov	r1, r4
 80007a4:	4630      	mov	r0, r6
 80007a6:	f000 f9bf 	bl	8000b28 <__smakebuf_r>
 80007aa:	89a2      	ldrh	r2, [r4, #12]
 80007ac:	f012 0301 	ands.w	r3, r2, #1
 80007b0:	d00c      	beq.n	80007cc <__swsetup_r+0xbc>
 80007b2:	2300      	movs	r3, #0
 80007b4:	60a3      	str	r3, [r4, #8]
 80007b6:	6963      	ldr	r3, [r4, #20]
 80007b8:	425b      	negs	r3, r3
 80007ba:	61a3      	str	r3, [r4, #24]
 80007bc:	6923      	ldr	r3, [r4, #16]
 80007be:	b953      	cbnz	r3, 80007d6 <__swsetup_r+0xc6>
 80007c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80007c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80007c8:	d1ba      	bne.n	8000740 <__swsetup_r+0x30>
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	0792      	lsls	r2, r2, #30
 80007ce:	bf58      	it	pl
 80007d0:	6963      	ldrpl	r3, [r4, #20]
 80007d2:	60a3      	str	r3, [r4, #8]
 80007d4:	e7f2      	b.n	80007bc <__swsetup_r+0xac>
 80007d6:	2000      	movs	r0, #0
 80007d8:	e7f7      	b.n	80007ca <__swsetup_r+0xba>
 80007da:	bf00      	nop
 80007dc:	20000004 	.word	0x20000004
 80007e0:	08000ebc 	.word	0x08000ebc
 80007e4:	08000edc 	.word	0x08000edc
 80007e8:	08000e9c 	.word	0x08000e9c

080007ec <__sflush_r>:
 80007ec:	898a      	ldrh	r2, [r1, #12]
 80007ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007f2:	4605      	mov	r5, r0
 80007f4:	0710      	lsls	r0, r2, #28
 80007f6:	460c      	mov	r4, r1
 80007f8:	d458      	bmi.n	80008ac <__sflush_r+0xc0>
 80007fa:	684b      	ldr	r3, [r1, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	dc05      	bgt.n	800080c <__sflush_r+0x20>
 8000800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000802:	2b00      	cmp	r3, #0
 8000804:	dc02      	bgt.n	800080c <__sflush_r+0x20>
 8000806:	2000      	movs	r0, #0
 8000808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800080c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800080e:	2e00      	cmp	r6, #0
 8000810:	d0f9      	beq.n	8000806 <__sflush_r+0x1a>
 8000812:	2300      	movs	r3, #0
 8000814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000818:	682f      	ldr	r7, [r5, #0]
 800081a:	6a21      	ldr	r1, [r4, #32]
 800081c:	602b      	str	r3, [r5, #0]
 800081e:	d032      	beq.n	8000886 <__sflush_r+0x9a>
 8000820:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000822:	89a3      	ldrh	r3, [r4, #12]
 8000824:	075a      	lsls	r2, r3, #29
 8000826:	d505      	bpl.n	8000834 <__sflush_r+0x48>
 8000828:	6863      	ldr	r3, [r4, #4]
 800082a:	1ac0      	subs	r0, r0, r3
 800082c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800082e:	b10b      	cbz	r3, 8000834 <__sflush_r+0x48>
 8000830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000832:	1ac0      	subs	r0, r0, r3
 8000834:	2300      	movs	r3, #0
 8000836:	4602      	mov	r2, r0
 8000838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800083a:	6a21      	ldr	r1, [r4, #32]
 800083c:	4628      	mov	r0, r5
 800083e:	47b0      	blx	r6
 8000840:	1c43      	adds	r3, r0, #1
 8000842:	89a3      	ldrh	r3, [r4, #12]
 8000844:	d106      	bne.n	8000854 <__sflush_r+0x68>
 8000846:	6829      	ldr	r1, [r5, #0]
 8000848:	291d      	cmp	r1, #29
 800084a:	d848      	bhi.n	80008de <__sflush_r+0xf2>
 800084c:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <__sflush_r+0x108>)
 800084e:	40ca      	lsrs	r2, r1
 8000850:	07d6      	lsls	r6, r2, #31
 8000852:	d544      	bpl.n	80008de <__sflush_r+0xf2>
 8000854:	2200      	movs	r2, #0
 8000856:	6062      	str	r2, [r4, #4]
 8000858:	04d9      	lsls	r1, r3, #19
 800085a:	6922      	ldr	r2, [r4, #16]
 800085c:	6022      	str	r2, [r4, #0]
 800085e:	d504      	bpl.n	800086a <__sflush_r+0x7e>
 8000860:	1c42      	adds	r2, r0, #1
 8000862:	d101      	bne.n	8000868 <__sflush_r+0x7c>
 8000864:	682b      	ldr	r3, [r5, #0]
 8000866:	b903      	cbnz	r3, 800086a <__sflush_r+0x7e>
 8000868:	6560      	str	r0, [r4, #84]	; 0x54
 800086a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800086c:	602f      	str	r7, [r5, #0]
 800086e:	2900      	cmp	r1, #0
 8000870:	d0c9      	beq.n	8000806 <__sflush_r+0x1a>
 8000872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000876:	4299      	cmp	r1, r3
 8000878:	d002      	beq.n	8000880 <__sflush_r+0x94>
 800087a:	4628      	mov	r0, r5
 800087c:	f000 f994 	bl	8000ba8 <_free_r>
 8000880:	2000      	movs	r0, #0
 8000882:	6360      	str	r0, [r4, #52]	; 0x34
 8000884:	e7c0      	b.n	8000808 <__sflush_r+0x1c>
 8000886:	2301      	movs	r3, #1
 8000888:	4628      	mov	r0, r5
 800088a:	47b0      	blx	r6
 800088c:	1c41      	adds	r1, r0, #1
 800088e:	d1c8      	bne.n	8000822 <__sflush_r+0x36>
 8000890:	682b      	ldr	r3, [r5, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d0c5      	beq.n	8000822 <__sflush_r+0x36>
 8000896:	2b1d      	cmp	r3, #29
 8000898:	d001      	beq.n	800089e <__sflush_r+0xb2>
 800089a:	2b16      	cmp	r3, #22
 800089c:	d101      	bne.n	80008a2 <__sflush_r+0xb6>
 800089e:	602f      	str	r7, [r5, #0]
 80008a0:	e7b1      	b.n	8000806 <__sflush_r+0x1a>
 80008a2:	89a3      	ldrh	r3, [r4, #12]
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	81a3      	strh	r3, [r4, #12]
 80008aa:	e7ad      	b.n	8000808 <__sflush_r+0x1c>
 80008ac:	690f      	ldr	r7, [r1, #16]
 80008ae:	2f00      	cmp	r7, #0
 80008b0:	d0a9      	beq.n	8000806 <__sflush_r+0x1a>
 80008b2:	0793      	lsls	r3, r2, #30
 80008b4:	680e      	ldr	r6, [r1, #0]
 80008b6:	bf08      	it	eq
 80008b8:	694b      	ldreq	r3, [r1, #20]
 80008ba:	600f      	str	r7, [r1, #0]
 80008bc:	bf18      	it	ne
 80008be:	2300      	movne	r3, #0
 80008c0:	eba6 0807 	sub.w	r8, r6, r7
 80008c4:	608b      	str	r3, [r1, #8]
 80008c6:	f1b8 0f00 	cmp.w	r8, #0
 80008ca:	dd9c      	ble.n	8000806 <__sflush_r+0x1a>
 80008cc:	4643      	mov	r3, r8
 80008ce:	463a      	mov	r2, r7
 80008d0:	6a21      	ldr	r1, [r4, #32]
 80008d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80008d4:	4628      	mov	r0, r5
 80008d6:	47b0      	blx	r6
 80008d8:	2800      	cmp	r0, #0
 80008da:	dc06      	bgt.n	80008ea <__sflush_r+0xfe>
 80008dc:	89a3      	ldrh	r3, [r4, #12]
 80008de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e2:	81a3      	strh	r3, [r4, #12]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008e8:	e78e      	b.n	8000808 <__sflush_r+0x1c>
 80008ea:	4407      	add	r7, r0
 80008ec:	eba8 0800 	sub.w	r8, r8, r0
 80008f0:	e7e9      	b.n	80008c6 <__sflush_r+0xda>
 80008f2:	bf00      	nop
 80008f4:	20400001 	.word	0x20400001

080008f8 <_fflush_r>:
 80008f8:	b538      	push	{r3, r4, r5, lr}
 80008fa:	690b      	ldr	r3, [r1, #16]
 80008fc:	4605      	mov	r5, r0
 80008fe:	460c      	mov	r4, r1
 8000900:	b1db      	cbz	r3, 800093a <_fflush_r+0x42>
 8000902:	b118      	cbz	r0, 800090c <_fflush_r+0x14>
 8000904:	6983      	ldr	r3, [r0, #24]
 8000906:	b90b      	cbnz	r3, 800090c <_fflush_r+0x14>
 8000908:	f000 f860 	bl	80009cc <__sinit>
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <_fflush_r+0x48>)
 800090e:	429c      	cmp	r4, r3
 8000910:	d109      	bne.n	8000926 <_fflush_r+0x2e>
 8000912:	686c      	ldr	r4, [r5, #4]
 8000914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000918:	b17b      	cbz	r3, 800093a <_fflush_r+0x42>
 800091a:	4621      	mov	r1, r4
 800091c:	4628      	mov	r0, r5
 800091e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000922:	f7ff bf63 	b.w	80007ec <__sflush_r>
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_fflush_r+0x4c>)
 8000928:	429c      	cmp	r4, r3
 800092a:	d101      	bne.n	8000930 <_fflush_r+0x38>
 800092c:	68ac      	ldr	r4, [r5, #8]
 800092e:	e7f1      	b.n	8000914 <_fflush_r+0x1c>
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <_fflush_r+0x50>)
 8000932:	429c      	cmp	r4, r3
 8000934:	bf08      	it	eq
 8000936:	68ec      	ldreq	r4, [r5, #12]
 8000938:	e7ec      	b.n	8000914 <_fflush_r+0x1c>
 800093a:	2000      	movs	r0, #0
 800093c:	bd38      	pop	{r3, r4, r5, pc}
 800093e:	bf00      	nop
 8000940:	08000ebc 	.word	0x08000ebc
 8000944:	08000edc 	.word	0x08000edc
 8000948:	08000e9c 	.word	0x08000e9c

0800094c <std>:
 800094c:	2300      	movs	r3, #0
 800094e:	b510      	push	{r4, lr}
 8000950:	4604      	mov	r4, r0
 8000952:	e9c0 3300 	strd	r3, r3, [r0]
 8000956:	6083      	str	r3, [r0, #8]
 8000958:	8181      	strh	r1, [r0, #12]
 800095a:	6643      	str	r3, [r0, #100]	; 0x64
 800095c:	81c2      	strh	r2, [r0, #14]
 800095e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000962:	6183      	str	r3, [r0, #24]
 8000964:	4619      	mov	r1, r3
 8000966:	2208      	movs	r2, #8
 8000968:	305c      	adds	r0, #92	; 0x5c
 800096a:	f7ff fe13 	bl	8000594 <memset>
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <std+0x38>)
 8000970:	6263      	str	r3, [r4, #36]	; 0x24
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <std+0x3c>)
 8000974:	62a3      	str	r3, [r4, #40]	; 0x28
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <std+0x40>)
 8000978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <std+0x44>)
 800097c:	6224      	str	r4, [r4, #32]
 800097e:	6323      	str	r3, [r4, #48]	; 0x30
 8000980:	bd10      	pop	{r4, pc}
 8000982:	bf00      	nop
 8000984:	08000d19 	.word	0x08000d19
 8000988:	08000d3b 	.word	0x08000d3b
 800098c:	08000d73 	.word	0x08000d73
 8000990:	08000d97 	.word	0x08000d97

08000994 <_cleanup_r>:
 8000994:	4901      	ldr	r1, [pc, #4]	; (800099c <_cleanup_r+0x8>)
 8000996:	f000 b885 	b.w	8000aa4 <_fwalk_reent>
 800099a:	bf00      	nop
 800099c:	080008f9 	.word	0x080008f9

080009a0 <__sfmoreglue>:
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	1e4a      	subs	r2, r1, #1
 80009a4:	2568      	movs	r5, #104	; 0x68
 80009a6:	4355      	muls	r5, r2
 80009a8:	460e      	mov	r6, r1
 80009aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80009ae:	f000 f949 	bl	8000c44 <_malloc_r>
 80009b2:	4604      	mov	r4, r0
 80009b4:	b140      	cbz	r0, 80009c8 <__sfmoreglue+0x28>
 80009b6:	2100      	movs	r1, #0
 80009b8:	e9c0 1600 	strd	r1, r6, [r0]
 80009bc:	300c      	adds	r0, #12
 80009be:	60a0      	str	r0, [r4, #8]
 80009c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80009c4:	f7ff fde6 	bl	8000594 <memset>
 80009c8:	4620      	mov	r0, r4
 80009ca:	bd70      	pop	{r4, r5, r6, pc}

080009cc <__sinit>:
 80009cc:	6983      	ldr	r3, [r0, #24]
 80009ce:	b510      	push	{r4, lr}
 80009d0:	4604      	mov	r4, r0
 80009d2:	bb33      	cbnz	r3, 8000a22 <__sinit+0x56>
 80009d4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80009d8:	6503      	str	r3, [r0, #80]	; 0x50
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <__sinit+0x58>)
 80009dc:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <__sinit+0x5c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6282      	str	r2, [r0, #40]	; 0x28
 80009e2:	4298      	cmp	r0, r3
 80009e4:	bf04      	itt	eq
 80009e6:	2301      	moveq	r3, #1
 80009e8:	6183      	streq	r3, [r0, #24]
 80009ea:	f000 f81f 	bl	8000a2c <__sfp>
 80009ee:	6060      	str	r0, [r4, #4]
 80009f0:	4620      	mov	r0, r4
 80009f2:	f000 f81b 	bl	8000a2c <__sfp>
 80009f6:	60a0      	str	r0, [r4, #8]
 80009f8:	4620      	mov	r0, r4
 80009fa:	f000 f817 	bl	8000a2c <__sfp>
 80009fe:	2200      	movs	r2, #0
 8000a00:	60e0      	str	r0, [r4, #12]
 8000a02:	2104      	movs	r1, #4
 8000a04:	6860      	ldr	r0, [r4, #4]
 8000a06:	f7ff ffa1 	bl	800094c <std>
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2109      	movs	r1, #9
 8000a0e:	68a0      	ldr	r0, [r4, #8]
 8000a10:	f7ff ff9c 	bl	800094c <std>
 8000a14:	2202      	movs	r2, #2
 8000a16:	2112      	movs	r1, #18
 8000a18:	68e0      	ldr	r0, [r4, #12]
 8000a1a:	f7ff ff97 	bl	800094c <std>
 8000a1e:	2301      	movs	r3, #1
 8000a20:	61a3      	str	r3, [r4, #24]
 8000a22:	bd10      	pop	{r4, pc}
 8000a24:	08000e98 	.word	0x08000e98
 8000a28:	08000995 	.word	0x08000995

08000a2c <__sfp>:
 8000a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <__sfp+0x70>)
 8000a30:	681e      	ldr	r6, [r3, #0]
 8000a32:	69b3      	ldr	r3, [r6, #24]
 8000a34:	4607      	mov	r7, r0
 8000a36:	b913      	cbnz	r3, 8000a3e <__sfp+0x12>
 8000a38:	4630      	mov	r0, r6
 8000a3a:	f7ff ffc7 	bl	80009cc <__sinit>
 8000a3e:	3648      	adds	r6, #72	; 0x48
 8000a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	d503      	bpl.n	8000a50 <__sfp+0x24>
 8000a48:	6833      	ldr	r3, [r6, #0]
 8000a4a:	b133      	cbz	r3, 8000a5a <__sfp+0x2e>
 8000a4c:	6836      	ldr	r6, [r6, #0]
 8000a4e:	e7f7      	b.n	8000a40 <__sfp+0x14>
 8000a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a54:	b16d      	cbz	r5, 8000a72 <__sfp+0x46>
 8000a56:	3468      	adds	r4, #104	; 0x68
 8000a58:	e7f4      	b.n	8000a44 <__sfp+0x18>
 8000a5a:	2104      	movs	r1, #4
 8000a5c:	4638      	mov	r0, r7
 8000a5e:	f7ff ff9f 	bl	80009a0 <__sfmoreglue>
 8000a62:	6030      	str	r0, [r6, #0]
 8000a64:	2800      	cmp	r0, #0
 8000a66:	d1f1      	bne.n	8000a4c <__sfp+0x20>
 8000a68:	230c      	movs	r3, #12
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	4604      	mov	r4, r0
 8000a6e:	4620      	mov	r0, r4
 8000a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <__sfp+0x74>)
 8000a74:	6665      	str	r5, [r4, #100]	; 0x64
 8000a76:	e9c4 5500 	strd	r5, r5, [r4]
 8000a7a:	60a5      	str	r5, [r4, #8]
 8000a7c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000a80:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000a84:	2208      	movs	r2, #8
 8000a86:	4629      	mov	r1, r5
 8000a88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a8c:	f7ff fd82 	bl	8000594 <memset>
 8000a90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a98:	e7e9      	b.n	8000a6e <__sfp+0x42>
 8000a9a:	bf00      	nop
 8000a9c:	08000e98 	.word	0x08000e98
 8000aa0:	ffff0001 	.word	0xffff0001

08000aa4 <_fwalk_reent>:
 8000aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aa8:	4680      	mov	r8, r0
 8000aaa:	4689      	mov	r9, r1
 8000aac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	b914      	cbnz	r4, 8000aba <_fwalk_reent+0x16>
 8000ab4:	4630      	mov	r0, r6
 8000ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000abe:	3f01      	subs	r7, #1
 8000ac0:	d501      	bpl.n	8000ac6 <_fwalk_reent+0x22>
 8000ac2:	6824      	ldr	r4, [r4, #0]
 8000ac4:	e7f5      	b.n	8000ab2 <_fwalk_reent+0xe>
 8000ac6:	89ab      	ldrh	r3, [r5, #12]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d907      	bls.n	8000adc <_fwalk_reent+0x38>
 8000acc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	d003      	beq.n	8000adc <_fwalk_reent+0x38>
 8000ad4:	4629      	mov	r1, r5
 8000ad6:	4640      	mov	r0, r8
 8000ad8:	47c8      	blx	r9
 8000ada:	4306      	orrs	r6, r0
 8000adc:	3568      	adds	r5, #104	; 0x68
 8000ade:	e7ee      	b.n	8000abe <_fwalk_reent+0x1a>

08000ae0 <__swhatbuf_r>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	460e      	mov	r6, r1
 8000ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	b096      	sub	sp, #88	; 0x58
 8000aec:	4614      	mov	r4, r2
 8000aee:	461d      	mov	r5, r3
 8000af0:	da07      	bge.n	8000b02 <__swhatbuf_r+0x22>
 8000af2:	2300      	movs	r3, #0
 8000af4:	602b      	str	r3, [r5, #0]
 8000af6:	89b3      	ldrh	r3, [r6, #12]
 8000af8:	061a      	lsls	r2, r3, #24
 8000afa:	d410      	bmi.n	8000b1e <__swhatbuf_r+0x3e>
 8000afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b00:	e00e      	b.n	8000b20 <__swhatbuf_r+0x40>
 8000b02:	466a      	mov	r2, sp
 8000b04:	f000 f96e 	bl	8000de4 <_fstat_r>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	dbf2      	blt.n	8000af2 <__swhatbuf_r+0x12>
 8000b0c:	9a01      	ldr	r2, [sp, #4]
 8000b0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000b12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000b16:	425a      	negs	r2, r3
 8000b18:	415a      	adcs	r2, r3
 8000b1a:	602a      	str	r2, [r5, #0]
 8000b1c:	e7ee      	b.n	8000afc <__swhatbuf_r+0x1c>
 8000b1e:	2340      	movs	r3, #64	; 0x40
 8000b20:	2000      	movs	r0, #0
 8000b22:	6023      	str	r3, [r4, #0]
 8000b24:	b016      	add	sp, #88	; 0x58
 8000b26:	bd70      	pop	{r4, r5, r6, pc}

08000b28 <__smakebuf_r>:
 8000b28:	898b      	ldrh	r3, [r1, #12]
 8000b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b2c:	079d      	lsls	r5, r3, #30
 8000b2e:	4606      	mov	r6, r0
 8000b30:	460c      	mov	r4, r1
 8000b32:	d507      	bpl.n	8000b44 <__smakebuf_r+0x1c>
 8000b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b38:	6023      	str	r3, [r4, #0]
 8000b3a:	6123      	str	r3, [r4, #16]
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	6163      	str	r3, [r4, #20]
 8000b40:	b002      	add	sp, #8
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
 8000b44:	ab01      	add	r3, sp, #4
 8000b46:	466a      	mov	r2, sp
 8000b48:	f7ff ffca 	bl	8000ae0 <__swhatbuf_r>
 8000b4c:	9900      	ldr	r1, [sp, #0]
 8000b4e:	4605      	mov	r5, r0
 8000b50:	4630      	mov	r0, r6
 8000b52:	f000 f877 	bl	8000c44 <_malloc_r>
 8000b56:	b948      	cbnz	r0, 8000b6c <__smakebuf_r+0x44>
 8000b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b5c:	059a      	lsls	r2, r3, #22
 8000b5e:	d4ef      	bmi.n	8000b40 <__smakebuf_r+0x18>
 8000b60:	f023 0303 	bic.w	r3, r3, #3
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	81a3      	strh	r3, [r4, #12]
 8000b6a:	e7e3      	b.n	8000b34 <__smakebuf_r+0xc>
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <__smakebuf_r+0x7c>)
 8000b6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000b70:	89a3      	ldrh	r3, [r4, #12]
 8000b72:	6020      	str	r0, [r4, #0]
 8000b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b78:	81a3      	strh	r3, [r4, #12]
 8000b7a:	9b00      	ldr	r3, [sp, #0]
 8000b7c:	6163      	str	r3, [r4, #20]
 8000b7e:	9b01      	ldr	r3, [sp, #4]
 8000b80:	6120      	str	r0, [r4, #16]
 8000b82:	b15b      	cbz	r3, 8000b9c <__smakebuf_r+0x74>
 8000b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b88:	4630      	mov	r0, r6
 8000b8a:	f000 f93d 	bl	8000e08 <_isatty_r>
 8000b8e:	b128      	cbz	r0, 8000b9c <__smakebuf_r+0x74>
 8000b90:	89a3      	ldrh	r3, [r4, #12]
 8000b92:	f023 0303 	bic.w	r3, r3, #3
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	81a3      	strh	r3, [r4, #12]
 8000b9c:	89a3      	ldrh	r3, [r4, #12]
 8000b9e:	431d      	orrs	r5, r3
 8000ba0:	81a5      	strh	r5, [r4, #12]
 8000ba2:	e7cd      	b.n	8000b40 <__smakebuf_r+0x18>
 8000ba4:	08000995 	.word	0x08000995

08000ba8 <_free_r>:
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	4605      	mov	r5, r0
 8000bac:	2900      	cmp	r1, #0
 8000bae:	d045      	beq.n	8000c3c <_free_r+0x94>
 8000bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bb4:	1f0c      	subs	r4, r1, #4
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bfb8      	it	lt
 8000bba:	18e4      	addlt	r4, r4, r3
 8000bbc:	f000 f946 	bl	8000e4c <__malloc_lock>
 8000bc0:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <_free_r+0x98>)
 8000bc2:	6813      	ldr	r3, [r2, #0]
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	b933      	cbnz	r3, 8000bd6 <_free_r+0x2e>
 8000bc8:	6063      	str	r3, [r4, #4]
 8000bca:	6014      	str	r4, [r2, #0]
 8000bcc:	4628      	mov	r0, r5
 8000bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bd2:	f000 b93c 	b.w	8000e4e <__malloc_unlock>
 8000bd6:	42a3      	cmp	r3, r4
 8000bd8:	d90c      	bls.n	8000bf4 <_free_r+0x4c>
 8000bda:	6821      	ldr	r1, [r4, #0]
 8000bdc:	1862      	adds	r2, r4, r1
 8000bde:	4293      	cmp	r3, r2
 8000be0:	bf04      	itt	eq
 8000be2:	681a      	ldreq	r2, [r3, #0]
 8000be4:	685b      	ldreq	r3, [r3, #4]
 8000be6:	6063      	str	r3, [r4, #4]
 8000be8:	bf04      	itt	eq
 8000bea:	1852      	addeq	r2, r2, r1
 8000bec:	6022      	streq	r2, [r4, #0]
 8000bee:	6004      	str	r4, [r0, #0]
 8000bf0:	e7ec      	b.n	8000bcc <_free_r+0x24>
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	b10a      	cbz	r2, 8000bfc <_free_r+0x54>
 8000bf8:	42a2      	cmp	r2, r4
 8000bfa:	d9fa      	bls.n	8000bf2 <_free_r+0x4a>
 8000bfc:	6819      	ldr	r1, [r3, #0]
 8000bfe:	1858      	adds	r0, r3, r1
 8000c00:	42a0      	cmp	r0, r4
 8000c02:	d10b      	bne.n	8000c1c <_free_r+0x74>
 8000c04:	6820      	ldr	r0, [r4, #0]
 8000c06:	4401      	add	r1, r0
 8000c08:	1858      	adds	r0, r3, r1
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	6019      	str	r1, [r3, #0]
 8000c0e:	d1dd      	bne.n	8000bcc <_free_r+0x24>
 8000c10:	6810      	ldr	r0, [r2, #0]
 8000c12:	6852      	ldr	r2, [r2, #4]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	4401      	add	r1, r0
 8000c18:	6019      	str	r1, [r3, #0]
 8000c1a:	e7d7      	b.n	8000bcc <_free_r+0x24>
 8000c1c:	d902      	bls.n	8000c24 <_free_r+0x7c>
 8000c1e:	230c      	movs	r3, #12
 8000c20:	602b      	str	r3, [r5, #0]
 8000c22:	e7d3      	b.n	8000bcc <_free_r+0x24>
 8000c24:	6820      	ldr	r0, [r4, #0]
 8000c26:	1821      	adds	r1, r4, r0
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	bf04      	itt	eq
 8000c2c:	6811      	ldreq	r1, [r2, #0]
 8000c2e:	6852      	ldreq	r2, [r2, #4]
 8000c30:	6062      	str	r2, [r4, #4]
 8000c32:	bf04      	itt	eq
 8000c34:	1809      	addeq	r1, r1, r0
 8000c36:	6021      	streq	r1, [r4, #0]
 8000c38:	605c      	str	r4, [r3, #4]
 8000c3a:	e7c7      	b.n	8000bcc <_free_r+0x24>
 8000c3c:	bd38      	pop	{r3, r4, r5, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000088 	.word	0x20000088

08000c44 <_malloc_r>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	1ccd      	adds	r5, r1, #3
 8000c48:	f025 0503 	bic.w	r5, r5, #3
 8000c4c:	3508      	adds	r5, #8
 8000c4e:	2d0c      	cmp	r5, #12
 8000c50:	bf38      	it	cc
 8000c52:	250c      	movcc	r5, #12
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	4606      	mov	r6, r0
 8000c58:	db01      	blt.n	8000c5e <_malloc_r+0x1a>
 8000c5a:	42a9      	cmp	r1, r5
 8000c5c:	d903      	bls.n	8000c66 <_malloc_r+0x22>
 8000c5e:	230c      	movs	r3, #12
 8000c60:	6033      	str	r3, [r6, #0]
 8000c62:	2000      	movs	r0, #0
 8000c64:	bd70      	pop	{r4, r5, r6, pc}
 8000c66:	f000 f8f1 	bl	8000e4c <__malloc_lock>
 8000c6a:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <_malloc_r+0xac>)
 8000c6c:	6814      	ldr	r4, [r2, #0]
 8000c6e:	4621      	mov	r1, r4
 8000c70:	b991      	cbnz	r1, 8000c98 <_malloc_r+0x54>
 8000c72:	4c20      	ldr	r4, [pc, #128]	; (8000cf4 <_malloc_r+0xb0>)
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	b91b      	cbnz	r3, 8000c80 <_malloc_r+0x3c>
 8000c78:	4630      	mov	r0, r6
 8000c7a:	f000 f83d 	bl	8000cf8 <_sbrk_r>
 8000c7e:	6020      	str	r0, [r4, #0]
 8000c80:	4629      	mov	r1, r5
 8000c82:	4630      	mov	r0, r6
 8000c84:	f000 f838 	bl	8000cf8 <_sbrk_r>
 8000c88:	1c43      	adds	r3, r0, #1
 8000c8a:	d124      	bne.n	8000cd6 <_malloc_r+0x92>
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	6033      	str	r3, [r6, #0]
 8000c90:	4630      	mov	r0, r6
 8000c92:	f000 f8dc 	bl	8000e4e <__malloc_unlock>
 8000c96:	e7e4      	b.n	8000c62 <_malloc_r+0x1e>
 8000c98:	680b      	ldr	r3, [r1, #0]
 8000c9a:	1b5b      	subs	r3, r3, r5
 8000c9c:	d418      	bmi.n	8000cd0 <_malloc_r+0x8c>
 8000c9e:	2b0b      	cmp	r3, #11
 8000ca0:	d90f      	bls.n	8000cc2 <_malloc_r+0x7e>
 8000ca2:	600b      	str	r3, [r1, #0]
 8000ca4:	50cd      	str	r5, [r1, r3]
 8000ca6:	18cc      	adds	r4, r1, r3
 8000ca8:	4630      	mov	r0, r6
 8000caa:	f000 f8d0 	bl	8000e4e <__malloc_unlock>
 8000cae:	f104 000b 	add.w	r0, r4, #11
 8000cb2:	1d23      	adds	r3, r4, #4
 8000cb4:	f020 0007 	bic.w	r0, r0, #7
 8000cb8:	1ac3      	subs	r3, r0, r3
 8000cba:	d0d3      	beq.n	8000c64 <_malloc_r+0x20>
 8000cbc:	425a      	negs	r2, r3
 8000cbe:	50e2      	str	r2, [r4, r3]
 8000cc0:	e7d0      	b.n	8000c64 <_malloc_r+0x20>
 8000cc2:	428c      	cmp	r4, r1
 8000cc4:	684b      	ldr	r3, [r1, #4]
 8000cc6:	bf16      	itet	ne
 8000cc8:	6063      	strne	r3, [r4, #4]
 8000cca:	6013      	streq	r3, [r2, #0]
 8000ccc:	460c      	movne	r4, r1
 8000cce:	e7eb      	b.n	8000ca8 <_malloc_r+0x64>
 8000cd0:	460c      	mov	r4, r1
 8000cd2:	6849      	ldr	r1, [r1, #4]
 8000cd4:	e7cc      	b.n	8000c70 <_malloc_r+0x2c>
 8000cd6:	1cc4      	adds	r4, r0, #3
 8000cd8:	f024 0403 	bic.w	r4, r4, #3
 8000cdc:	42a0      	cmp	r0, r4
 8000cde:	d005      	beq.n	8000cec <_malloc_r+0xa8>
 8000ce0:	1a21      	subs	r1, r4, r0
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	f000 f808 	bl	8000cf8 <_sbrk_r>
 8000ce8:	3001      	adds	r0, #1
 8000cea:	d0cf      	beq.n	8000c8c <_malloc_r+0x48>
 8000cec:	6025      	str	r5, [r4, #0]
 8000cee:	e7db      	b.n	8000ca8 <_malloc_r+0x64>
 8000cf0:	20000088 	.word	0x20000088
 8000cf4:	2000008c 	.word	0x2000008c

08000cf8 <_sbrk_r>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	4c06      	ldr	r4, [pc, #24]	; (8000d14 <_sbrk_r+0x1c>)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4605      	mov	r5, r0
 8000d00:	4608      	mov	r0, r1
 8000d02:	6023      	str	r3, [r4, #0]
 8000d04:	f7ff fb66 	bl	80003d4 <_sbrk>
 8000d08:	1c43      	adds	r3, r0, #1
 8000d0a:	d102      	bne.n	8000d12 <_sbrk_r+0x1a>
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	b103      	cbz	r3, 8000d12 <_sbrk_r+0x1a>
 8000d10:	602b      	str	r3, [r5, #0]
 8000d12:	bd38      	pop	{r3, r4, r5, pc}
 8000d14:	20000094 	.word	0x20000094

08000d18 <__sread>:
 8000d18:	b510      	push	{r4, lr}
 8000d1a:	460c      	mov	r4, r1
 8000d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d20:	f000 f896 	bl	8000e50 <_read_r>
 8000d24:	2800      	cmp	r0, #0
 8000d26:	bfab      	itete	ge
 8000d28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8000d2c:	181b      	addge	r3, r3, r0
 8000d2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d32:	bfac      	ite	ge
 8000d34:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d36:	81a3      	strhlt	r3, [r4, #12]
 8000d38:	bd10      	pop	{r4, pc}

08000d3a <__swrite>:
 8000d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d3e:	461f      	mov	r7, r3
 8000d40:	898b      	ldrh	r3, [r1, #12]
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	4605      	mov	r5, r0
 8000d46:	460c      	mov	r4, r1
 8000d48:	4616      	mov	r6, r2
 8000d4a:	d505      	bpl.n	8000d58 <__swrite+0x1e>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d54:	f000 f868 	bl	8000e28 <_lseek_r>
 8000d58:	89a3      	ldrh	r3, [r4, #12]
 8000d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d62:	81a3      	strh	r3, [r4, #12]
 8000d64:	4632      	mov	r2, r6
 8000d66:	463b      	mov	r3, r7
 8000d68:	4628      	mov	r0, r5
 8000d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d6e:	f000 b817 	b.w	8000da0 <_write_r>

08000d72 <__sseek>:
 8000d72:	b510      	push	{r4, lr}
 8000d74:	460c      	mov	r4, r1
 8000d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d7a:	f000 f855 	bl	8000e28 <_lseek_r>
 8000d7e:	1c43      	adds	r3, r0, #1
 8000d80:	89a3      	ldrh	r3, [r4, #12]
 8000d82:	bf15      	itete	ne
 8000d84:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d8e:	81a3      	strheq	r3, [r4, #12]
 8000d90:	bf18      	it	ne
 8000d92:	81a3      	strhne	r3, [r4, #12]
 8000d94:	bd10      	pop	{r4, pc}

08000d96 <__sclose>:
 8000d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d9a:	f000 b813 	b.w	8000dc4 <_close_r>
	...

08000da0 <_write_r>:
 8000da0:	b538      	push	{r3, r4, r5, lr}
 8000da2:	4c07      	ldr	r4, [pc, #28]	; (8000dc0 <_write_r+0x20>)
 8000da4:	4605      	mov	r5, r0
 8000da6:	4608      	mov	r0, r1
 8000da8:	4611      	mov	r1, r2
 8000daa:	2200      	movs	r2, #0
 8000dac:	6022      	str	r2, [r4, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	f7ff fa37 	bl	8000222 <_write>
 8000db4:	1c43      	adds	r3, r0, #1
 8000db6:	d102      	bne.n	8000dbe <_write_r+0x1e>
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	b103      	cbz	r3, 8000dbe <_write_r+0x1e>
 8000dbc:	602b      	str	r3, [r5, #0]
 8000dbe:	bd38      	pop	{r3, r4, r5, pc}
 8000dc0:	20000094 	.word	0x20000094

08000dc4 <_close_r>:
 8000dc4:	b538      	push	{r3, r4, r5, lr}
 8000dc6:	4c06      	ldr	r4, [pc, #24]	; (8000de0 <_close_r+0x1c>)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	4605      	mov	r5, r0
 8000dcc:	4608      	mov	r0, r1
 8000dce:	6023      	str	r3, [r4, #0]
 8000dd0:	f7ff facb 	bl	800036a <_close>
 8000dd4:	1c43      	adds	r3, r0, #1
 8000dd6:	d102      	bne.n	8000dde <_close_r+0x1a>
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	b103      	cbz	r3, 8000dde <_close_r+0x1a>
 8000ddc:	602b      	str	r3, [r5, #0]
 8000dde:	bd38      	pop	{r3, r4, r5, pc}
 8000de0:	20000094 	.word	0x20000094

08000de4 <_fstat_r>:
 8000de4:	b538      	push	{r3, r4, r5, lr}
 8000de6:	4c07      	ldr	r4, [pc, #28]	; (8000e04 <_fstat_r+0x20>)
 8000de8:	2300      	movs	r3, #0
 8000dea:	4605      	mov	r5, r0
 8000dec:	4608      	mov	r0, r1
 8000dee:	4611      	mov	r1, r2
 8000df0:	6023      	str	r3, [r4, #0]
 8000df2:	f7ff fac6 	bl	8000382 <_fstat>
 8000df6:	1c43      	adds	r3, r0, #1
 8000df8:	d102      	bne.n	8000e00 <_fstat_r+0x1c>
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	b103      	cbz	r3, 8000e00 <_fstat_r+0x1c>
 8000dfe:	602b      	str	r3, [r5, #0]
 8000e00:	bd38      	pop	{r3, r4, r5, pc}
 8000e02:	bf00      	nop
 8000e04:	20000094 	.word	0x20000094

08000e08 <_isatty_r>:
 8000e08:	b538      	push	{r3, r4, r5, lr}
 8000e0a:	4c06      	ldr	r4, [pc, #24]	; (8000e24 <_isatty_r+0x1c>)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	4605      	mov	r5, r0
 8000e10:	4608      	mov	r0, r1
 8000e12:	6023      	str	r3, [r4, #0]
 8000e14:	f7ff fac5 	bl	80003a2 <_isatty>
 8000e18:	1c43      	adds	r3, r0, #1
 8000e1a:	d102      	bne.n	8000e22 <_isatty_r+0x1a>
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	b103      	cbz	r3, 8000e22 <_isatty_r+0x1a>
 8000e20:	602b      	str	r3, [r5, #0]
 8000e22:	bd38      	pop	{r3, r4, r5, pc}
 8000e24:	20000094 	.word	0x20000094

08000e28 <_lseek_r>:
 8000e28:	b538      	push	{r3, r4, r5, lr}
 8000e2a:	4c07      	ldr	r4, [pc, #28]	; (8000e48 <_lseek_r+0x20>)
 8000e2c:	4605      	mov	r5, r0
 8000e2e:	4608      	mov	r0, r1
 8000e30:	4611      	mov	r1, r2
 8000e32:	2200      	movs	r2, #0
 8000e34:	6022      	str	r2, [r4, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	f7ff fabe 	bl	80003b8 <_lseek>
 8000e3c:	1c43      	adds	r3, r0, #1
 8000e3e:	d102      	bne.n	8000e46 <_lseek_r+0x1e>
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	b103      	cbz	r3, 8000e46 <_lseek_r+0x1e>
 8000e44:	602b      	str	r3, [r5, #0]
 8000e46:	bd38      	pop	{r3, r4, r5, pc}
 8000e48:	20000094 	.word	0x20000094

08000e4c <__malloc_lock>:
 8000e4c:	4770      	bx	lr

08000e4e <__malloc_unlock>:
 8000e4e:	4770      	bx	lr

08000e50 <_read_r>:
 8000e50:	b538      	push	{r3, r4, r5, lr}
 8000e52:	4c07      	ldr	r4, [pc, #28]	; (8000e70 <_read_r+0x20>)
 8000e54:	4605      	mov	r5, r0
 8000e56:	4608      	mov	r0, r1
 8000e58:	4611      	mov	r1, r2
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	6022      	str	r2, [r4, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	f7ff fa66 	bl	8000330 <_read>
 8000e64:	1c43      	adds	r3, r0, #1
 8000e66:	d102      	bne.n	8000e6e <_read_r+0x1e>
 8000e68:	6823      	ldr	r3, [r4, #0]
 8000e6a:	b103      	cbz	r3, 8000e6e <_read_r+0x1e>
 8000e6c:	602b      	str	r3, [r5, #0]
 8000e6e:	bd38      	pop	{r3, r4, r5, pc}
 8000e70:	20000094 	.word	0x20000094

08000e74 <_init>:
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	bf00      	nop
 8000e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7a:	bc08      	pop	{r3}
 8000e7c:	469e      	mov	lr, r3
 8000e7e:	4770      	bx	lr

08000e80 <_fini>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	bf00      	nop
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr
