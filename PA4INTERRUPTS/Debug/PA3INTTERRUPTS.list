
PA3INTTERRUPTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000250  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e4  080003e4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e4  080003e4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003e4  080003e4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e4  080003e4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e4  080003e4  000103e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003e8  080003e8  000103e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003ec  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003f0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003f0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c76  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000918  00000000  00000000  00022caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002e8  00000000  00000000  000235c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000290  00000000  00000000  000238b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014718  00000000  00000000  00023b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002810  00000000  00000000  00038258  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081582  00000000  00000000  0003aa68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bbfea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a08  00000000  00000000  000bc068  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003cc 	.word	0x080003cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080003cc 	.word	0x080003cc

080001d4 <main>:
	GPIOA->ODR |=GPIO_ODR_ODR_4;
	EXTI->PR   |=EXTI_PR_PR1;
}

int main (void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001d8:	4b10      	ldr	r3, [pc, #64]	; (800021c <main+0x48>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001dc:	4a0f      	ldr	r2, [pc, #60]	; (800021c <main+0x48>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001e4:	4b0d      	ldr	r3, [pc, #52]	; (800021c <main+0x48>)
 80001e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e8:	4a0c      	ldr	r2, [pc, #48]	; (800021c <main+0x48>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= GPIO_MODER_MODER4_0;
 80001f0:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <main+0x4c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <main+0x4c>)
 80001f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fa:	6013      	str	r3, [r2, #0]
	EXTI->IMR    |= EXTI_IMR_MR1;
 80001fc:	4b09      	ldr	r3, [pc, #36]	; (8000224 <main+0x50>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a08      	ldr	r2, [pc, #32]	; (8000224 <main+0x50>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	6013      	str	r3, [r2, #0]
	EXTI->RTSR   |= EXTI_RTSR_TR1;
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <main+0x50>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	4a05      	ldr	r2, [pc, #20]	; (8000224 <main+0x50>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	6093      	str	r3, [r2, #8]
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000214:	2007      	movs	r0, #7
 8000216:	f000 f8a7 	bl	8000368 <HAL_NVIC_EnableIRQ>
	while(1);
 800021a:	e7fe      	b.n	800021a <main+0x46>
 800021c:	40023800 	.word	0x40023800
 8000220:	40020000 	.word	0x40020000
 8000224:	40013c00 	.word	0x40013c00

08000228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr

08000236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000236:	b480      	push	{r7}
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800023a:	e7fe      	b.n	800023a <HardFault_Handler+0x4>

0800023c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000240:	e7fe      	b.n	8000240 <MemManage_Handler+0x4>

08000242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000242:	b480      	push	{r7}
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000246:	e7fe      	b.n	8000246 <BusFault_Handler+0x4>

08000248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800024c:	e7fe      	b.n	800024c <UsageFault_Handler+0x4>

0800024e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800024e:	b480      	push	{r7}
 8000250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000252:	bf00      	nop
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr

0800025c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr

0800026a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800026a:	b480      	push	{r7}
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800027c:	f000 f842 	bl	8000304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <SystemInit+0x28>)
 800028a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <SystemInit+0x28>)
 8000290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <SystemInit+0x28>)
 800029a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800029e:	609a      	str	r2, [r3, #8]
#endif
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002b6:	e003      	b.n	80002c0 <LoopCopyDataInit>

080002b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002be:	3104      	adds	r1, #4

080002c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002c0:	480b      	ldr	r0, [pc, #44]	; (80002f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002c8:	d3f6      	bcc.n	80002b8 <CopyDataInit>
  ldr  r2, =_sbss
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002cc:	e002      	b.n	80002d4 <LoopFillZerobss>

080002ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002d0:	f842 3b04 	str.w	r3, [r2], #4

080002d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002d8:	d3f9      	bcc.n	80002ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002da:	f7ff ffd3 	bl	8000284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002de:	f000 f851 	bl	8000384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002e2:	f7ff ff77 	bl	80001d4 <main>
  bx  lr    
 80002e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80002e8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80002ec:	080003ec 	.word	0x080003ec
  ldr  r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002f4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80002f8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80002fc:	20000024 	.word	0x20000024

08000300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_IRQHandler>
	...

08000304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <HAL_IncTick+0x20>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <HAL_IncTick+0x24>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4413      	add	r3, r2
 8000314:	4a04      	ldr	r2, [pc, #16]	; (8000328 <HAL_IncTick+0x24>)
 8000316:	6013      	str	r3, [r2, #0]
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	20000000 	.word	0x20000000
 8000328:	20000020 	.word	0x20000020

0800032c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033a:	2b00      	cmp	r3, #0
 800033c:	db0b      	blt.n	8000356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f003 021f 	and.w	r2, r3, #31
 8000344:	4907      	ldr	r1, [pc, #28]	; (8000364 <__NVIC_EnableIRQ+0x38>)
 8000346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034a:	095b      	lsrs	r3, r3, #5
 800034c:	2001      	movs	r0, #1
 800034e:	fa00 f202 	lsl.w	r2, r0, r2
 8000352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	e000e100 	.word	0xe000e100

08000368 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ffd8 	bl	800032c <__NVIC_EnableIRQ>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	4e0d      	ldr	r6, [pc, #52]	; (80003bc <__libc_init_array+0x38>)
 8000388:	4c0d      	ldr	r4, [pc, #52]	; (80003c0 <__libc_init_array+0x3c>)
 800038a:	1ba4      	subs	r4, r4, r6
 800038c:	10a4      	asrs	r4, r4, #2
 800038e:	2500      	movs	r5, #0
 8000390:	42a5      	cmp	r5, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	4e0b      	ldr	r6, [pc, #44]	; (80003c4 <__libc_init_array+0x40>)
 8000396:	4c0c      	ldr	r4, [pc, #48]	; (80003c8 <__libc_init_array+0x44>)
 8000398:	f000 f818 	bl	80003cc <_init>
 800039c:	1ba4      	subs	r4, r4, r6
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	2500      	movs	r5, #0
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003ac:	4798      	blx	r3
 80003ae:	3501      	adds	r5, #1
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003b6:	4798      	blx	r3
 80003b8:	3501      	adds	r5, #1
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003e4 	.word	0x080003e4
 80003c0:	080003e4 	.word	0x080003e4
 80003c4:	080003e4 	.word	0x080003e4
 80003c8:	080003e8 	.word	0x080003e8

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
